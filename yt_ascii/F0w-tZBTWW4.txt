well welcome to my talk thanks for coming to my talk so my name is sebastian and i want to talk about web programming in c plus plus which i think is a is pretty it's pretty fun or at least it can be it can be more fun than it currently is before i go into the details on the tool typescript that i have built and what it does i would like to show it to you and see how we could do web programming with better tools so here let me do some live programming so here we have a little c plus program and in the comments you see very trivial javascript code and i would like to program like the same javascript code but in c plus plus and have this output a little message on the website and so what we would like to have and currently don't have is something that well looks pretty much like the javascript code because that's the api we're using that's possibly what you're already familiar with what is already documented i don't want to reinvent the wheel but in addition like if this is c plus plus and i have to compile this anyway then i would like to have some type checking along the way and this is what i like to do i want to have c plus plus program to a javascript api but i still want to have type checking so okay let's add this little element to the document body and then clickity click i'm compiling this and now unfortunately for demonstration i get a compile error what does it say it says oh there's no matching member function for font size and why is that because a css star declaration font size takes a string and not a number and now i remember er in cascading style sheets this font size needs a unit which is why this is a string so i was lucky i had a compiler here to catch that error because that's really subtle and if i fix that then this compiles of course and what would the output look like well unsurprisingly it would look like this this is what we just did and i can even tell you and show you that this is really c plus plus compiled to webassembly and not javascript because google chrome can tell us it is so we can look at the source code the c plus source code in chrome and when i reload we can even set breakpoints and debug this application so that is including variable stack traces we'll look at that later in more detail so there's even tool support for this which is pretty cool so let me tell you what you have just seen what you just saw was the typescript tool in action and what this does is it can take type information for javascript library from typescript because typescript has so-called typescript interface definitions for javascript libraries and then i compile these type definitions from typescript into c plus header files that allows now to do typesafe programming to a javascript api so why do we build web applications in c plus in the first place maybe this needs a little bit of motivation usually with think cell we have an application you may know or may not know which is nc plus plus it's the desktop application and recently we wanted to build a small web application it's very simple this is an online tool to blow.com and we want to import that chart and import it into a think cell chart in powerpoint oh sorry so the user can in chrome select that chart and then the web application opens this is all of it and he can map the data from tableau to the category series and values let's say of a stack chart and then we switch to powerpoint and insert that chart in powerpoint and that chart remains linked to the data you have on tableau.com so you've seen the web application was tiny it's maybe 1000 lines of code and initially we wrote it in typescript but that meant we couldn't do any code sharing and even for such a small application because it had to interface with our native application there was some amount of code sharing that we wanted to do sorry and not only that but even programming in javascript can be surprisingly hard this application has one interesting bit in those thousand lines this data that i'm getting is in like a database format there's a lot of let's say key value pairs and i have to sort them into the tabular format that i need to create a chart so the individual data values can be numbers that can be strings or dates and i would like to sort them and get the unique values and then do a sequence of binary searches to transform this into this which is what i need to create a chart so i try to do that in javascript or typescript to be more precise and that turned out to be surprisingly hard so it starts when you try to sort an array in javascript and the documentation tells you that by default sorting an array in javascript means that all the elements will be converted into strings and then they are utf-16 code unit values are compared that's typically not what i do when i sort an array and to make matters worse the time in space complexity is not guaranteed and then to go on there's no unique make unique range algorithm or something there's not even a binary search in the standard javascript library so you have to do what every good javascript programmer does and you go to npm and you look for binary search and then you can figure out which one is actually binary search and which of the 316 packages is actually a correct binary search and having experience in c plus plus there would be an easier solution for me because c plus plus can do all of these things we would have a data value that's a variant of double string and a time point we could have a vector of those data values fill it somehow and then we have range of sword and stead range is unique to get the range of unique elements and last but not least we can do binary search and that has guaranteed logarithmic complexity so in some cases the c plus standard library is very very powerful compared to some other languages and even if it isn't it's the language i'm more familiar with it's possibly the language that i have a large custom library for that i would like to use so there can be quite a number of good reasons to program web applications in c plus plus maybe only that you want to be bought for 20 billion by adobe that's one good reason like figma you might have heard was i think a webassembly application so what do i need to do to get c plus plus into the web browser into the web so first of all i have to compile c plus plus for the web then i want to call javascript from c plus plus and then in the end i want to make these calls in some type safe way using this tool that i've built so in order to compile c plus plus for the web we need webassembly and the associated tool chains of course and that's not a new technology there have been a number of talks on webassembly this is going to be the shortest introduction to webassembly ever webassembly is a binary format that we can compile to which is standardized and is supported by all major browser vendors which is pretty huge for web technology it is a fast and compact binary format that supports two low-level data types which will be important that's integer and floating point numbers and each webassembly module runs in its own secure sandbox in the browser so webassembly is typically instantiated from javascript a webassembly module and can interact with that javascript environment it can for example declare that it would like to import a function b from javascript or that it would like to export one of its own functions to javascript and it can even export access to its memory blob which is just a sequence of bytes that this webassembly module gets in code this would look a bit like this we create some javascript functions our import table is a javascript object then we instantiate the webassembly object passing the binary that we get some from somewhere and the imports and when that is instantiated we can call the exported functions on it for example webassembly also has a standardized text format which is handy if you want to look at the raw source code so that's essentially the assembly format for webassembly and it reads pretty similarly so here you can probably guess this is the beginning of the web assembly code for the c string compare function so it takes two integers as arguments which are pointers to zero terminated strings and it returns an integer minus one zero or one hopefully and if i want to get a c plus plus application into the web browser i don't only need like i need a compiler so that would be clang which has a webassembly backend for quite some time and i need some runtime support and all of this is packaged by m script so m script wraps the clan compiler and it comes with a large runtime library that lets us do useful things in the web browser from c plus plus making opgl calls getting input device events making sound things like that so this has been extremely successful especially when you want to port a self-contained application so if input devices and opengl and audio is all that you need then you're probably a game and this is what inscription works extremely well for but i want to maybe interact with the javascript environment maybe i want to use an external javascript library for some other tool for example for tableau.com so this is not quite enough for me because what we can currently do with m scripting when we want to call javascript from c plus plus isn't super beautiful so there are three ways there's one way we've seen initially that webassembly modules can import and export functions so in c plus plus you would declare declare it as extern c and then the web assembly instantiation would link it as dm script magic would link it against the javascript implementation and you could call that function but that would be limited to the data types that webassembly supports so it can only take integers or floating point numbers this argument or return values there's another way in m scripting where you can directly embed javascript code inside your c plus code so through some compiler magic this javascript code would be extracted when you compile it and moved into some javascript module and the function will be generated and then you can call and call that that's very handy but it's also limited to integer and floating point arguments and return values so again you cannot pass strings or get javascript objects back and pass them around in c plus for example and then there's the third way which is the m scripting val api i think it's the m bind api which lets you transliterate javascript to c plus plus somehow so here for example we can make a sound the way we do this is we pass a lot of strings to the javascript world and none of these calls are type checked in any meaningful way so we create a global audio context object we hope we don't make a typo here then we call a method on that thing we explicitly have to specify the type of the return argument the method name is passed by string again there's no guarantee we've spelled oscillator correctly and then the rest is the same so it's very error-prone it is great that this works but it combines the disadvantages of both languages so now we write this in c plus plus we have to compile it that possibly takes a long time and this compilation step doesn't give us anything it doesn't give us at least the type checking we are used to from c plus plus so we have now a compiled and untyped checked language and that's that's a pretty bad combination it's not that's not what we want i guess so how does that work behind the scenes behind the scenes dm script and script and dm script and runtime has some methods to let us create javascript objects from c plus plus and to pass them around and this is what we will need these are again extra and c functions that m script declares and implements in javascript and what they do in the javascript world is pretty much what the title says there's one function for example m value object which will implement it in javascript create a new javascript object an empty object no properties no nothing and we'll create a reference count for that object and we'll store both of these things in some map again in the javascript world and it will return a handle to that object to the c plus world so in the c plus plus webassembly world we have an integer which references some object on the javascript side we can play the same game by con when we want to convert c strings to javascript strings there's a function to do that it gets a pointer which is an integer to the webassembly memory object the javascript function can read this zero terminated string from the memory object character by character it will append it to a javascript string and convert it possibly if the encoding is not correct and we'll store the string in a map again and return a handle to the c plus world so in c plus plus those objects are all integers and now you can probably imagine how increasing the reference count works we can decrease the reference count we can call methods on these things always by passing an integer handle but we don't want to write it like this we want to write something maybe like this like in my initial code example where we have actual types that the compiler can check against which have actual functions and these functions take arguments that have a type and we want to check against those types so this is what we what we can do with with my typescript tool any any questions so far how does subscription thingy works then i'll just continue so this is where my typescript tool comes in it compiles typescript interface declarations to c plus plus interfaces so we can make somewhat idiomatic calls to javascript libraries from c plus plus with the syntax that is at least similar to the javascript syntax so where we would in javascript maybe assign a string to the title property of a document we can pass a string to the title function in c plus plus and this tool is currently i'm currently in the process of integrating this into the apps script and tool chain so hopefully this becomes something that will be used more frequently well that's still introverts so what are these type definition libraries how does that look what's my source information so this is an excerpt for the type definition library for the document object that we have seen so you see that the document object has a url property which is a string but it's read only it has active element on the page which can be now there's a list of things and there is a title that i've manipulated which is not read only which is why i can't set it and the cool thing about those typescript interface definitions that's always a bit of a mouthful is that they don't only exist for the standard javascript libraries like the dom api and stuff but there is an online repository which is officially part of typescript where users can submit such type declare type definitions for arbitrary javascript libraries so this repository is huge already and it has typescript declarations for a number of popular javascript libraries so if you do some programming in javascript chances are good that there is some type information available for this that we can use in c plus and typescript not only ships with those type definition libraries but luckily for us it also ships with a pretty powerful parser api so we didn't even have to write that that's a very short snippet of code that lets us read one of those interface definitions and then we can iterate over all the syntax nodes in a file and check is that a function declaration is that a variable statement if it is a function declaration what's its name what's its return type its arguments etc and the output looks a bit like this so what we create is a typesafe wrapper around the existing not type checked m-script api so the output uses everything that inscription already offers us and we just have to create a typesafe wrapper here for the document title property again to taking a string or returning a string so now we do and this is why that's also a fun project to hack on because we do something that is quite interesting we try to translate between two languages we try to translate typescript constructs to c plus plus into meaningful c plus plus and we always have to ask ourselves is that a language construct that we can translate at all or is that too weird too dynamic to be translated to c plus plus sorry i misclicked so this is for example valid typescript do you have a function that takes an argument a and the type of that argument a is any type that has the links property and i'm pretty sure we can write something that expresses this in c plus plus but it wouldn't probably be very very easy and luckily for us our input is typically pretty benign because there are also very lazy programmers who write these things who might write something like that instead and this is something we could easily translate to c plus plus because there's an actual type with an actual name that we can translate that being said there is a large number of language constructs that we do support or the base typescript constructs any and undefined null string with optional members there are type guards which are a mix of a type check and the cost there are union types typescript supports mixed enumerations that we support as well and you can pass c plus plus functions to javascript to be called as a callback for example in a button handler and we also support typescript generic types arrays records etc and the tool is self-hosting which means that it for a while now it compiles the typescript for the api it uses itself and it also compiles all the standard libraries including the dom api so you can use at least that and it compiles some other libraries but not all of these super complicated big ones so when that was the typescript code to create and parse a little typescript file the equivalent c plus plus code looks very very similar and you can see here how we are passing a c plus lambda to javascript and have that called back as a callback in that case for each for each syntax node that we encounter but there are some interesting semantical differences between those two but again make this a lot of the times a fun project because it's an open source project so i have to plug this a bit as well so in c plus plus we have the one definition rule whereas in typescript it is totally okay to define classes multiple times and then those these declarations with their properties will be merged for example into a single declaration the type system is different where we have a static type system in c plus plus where the names of classes matter in typescript with structural typing where the name doesn't matter but what matters is what properties a class has has and if it has the correct set of properties and then there are surprising differences like the overloading rules can be different so here is something which probably wouldn't be valid c plus plus where you have an array with two constructors and now when you create an array of a number with a single argument it should be ambiguous which of those two things are called but maybe not surprisingly it is not ambiguous in typescript i figured you use the first one but i don't know if that's the rule to use the first one or if that matched better for some reason and then of course there's the built-in types in typescript unions intersections literal types that we have to transport to c plus plus somehow and the priorities of the tool are to always generate valency plus plus in the first place of course the output should compile even and it's better to leave something out and not translate it if we can't understand it that's better than generating invalid c plus plus obviously and a few remarks about some design decisions that you might have noticed so this is what the javascript looks like we could probably implement something in c plus plus that would allow us to use this syntax as well you would have some title member and that would have some overloaded assignment operator and then it suddenly would do magic and move that stuff to the javascript world but i thought that's not a very good decision because it looks like this would be a very simple and very fast operation it looks like this is just assigning to the member of a struct when in fact a lot of expensive interactions between c plus plus and the javascript world are going on so well namespacing is one thing i wanted to make it obvious when expensive operations happen and all this marshaling to javascript is expensive so this should probably be the method in the first place so at least we know that we are calling a method on some javascript object and passing data to that and then there's also another expensive operation that i'm hiding here which is the cast from ac plus string to a javascript string where you have also seen that this round trips to javascript converts the c string to a javascript string sends that back possibly and then sends it back to javascript so if you do that at least you should know that this is an expensive operation and then last but not least now i've generated a conventional setter for this title property which is probably what you would do if you wrote that code by hand but implicitly or well explicitly i've now changed the name of that member so i knew the document has a title property but i've changed it to set title i cannot know if there's not another function in that object that already is called set title and now i'm generating a conflict with that existing name so we decided against changing the name and somewhat unusually the setter is called the same as the getter it's just called title but at least we know that that name is free it's still available and then among the among the large number of differences that are actually pretty annoying a c plus plus is that in in typescript for example the declaration order of classes doesn't matter so this is valid typescript we can define a union of foon bar before declaring foo and bar and polish no reason why we couldn't change that in c plus plus but that's the way that's the way it currently is in c plus plus and c plus plus we have to sort these and bring them in the correct order which is what we have to do when we translate that to c plus plus there are union types in typescript which are also very different from c plus plus unions so a union of a or b or c doesn't have a discriminating value like a c plus plus union you cannot figure out is this either a or b or c it is instead all of those types at once so a union a b or c in typescript is defined as the type that has the members that the intersection representing the intersection of the properties of those three types so it's like a set theoretic thing and consequently because names don't matter in typescript an object of that type can be constructed from any other type that has the correct set of properties so how can we translate something like that to c plus plus that's what i said initially that's what structural typing means in javascript and in typescript its hype is defined by its properties and not by its name so that's different in c plus plus and c plus plus names do matter but there are still a number of useful operations that we can do that are valid c plus plus and valid typescript so we can say for example that such a union converts two common based classes of a b and c that's certainly valid they will all have this property no they will all have an intersection of properties we can convert to wider unions that set will only get smaller if we add another type and we can construct that from anything that a b or c can be constructed from because they also will all have that type and a practice that works quite well because as before people will typically write something like that in practice because they're very lazy and they won't repeat the same property three times to express that all these types are somewhat compatible but they will write inheritance relationships that we can actually express in c plus plus and i said there are mixed enumerations in typescript we can also translate these two c plus plus by exploiting another customization point that we have which is the marshalling from the c plus world to the javascript world and here we can say while we write a c plus plus a classic c plus plus enumeration and we introduce some customization point for enumerations that tells us well we have a enumeration funny enum and we create a map from the c plus enumeration to the value that this enumeration should have in javascript and then we look that up and marshall that javascript value instead through the javascript world so let me show you another short code example i'm not so short so i've said before that we can pass c plus functions two javascript so here we want to create an event listener we want to add an event listener to a button let me show you let me show you the the problem we are having this very realistic problem so we have this very untidy set of objects and we want to sort them in c plus plus now or less an anti-ventilation method in javascript that takes a string as the first argument some there's a list of valid strings that we can pass and then we can want to pass a function and we cannot just pass a c plus function pointer to javascript of course they will not know what to do with it but what we can do instead is thanks to some code generation we can pass an object which is our click handler which will receive a mouse event which is when we are clicked and then again reading more or less like the javascript equivalent it can look up all the diff elements on the page get them into an html collection do it for each over them because we made those collections of javascript objects compatible with with four each's we collect all of them in a vector then we sort that vector but the client height of the divs this is our think cell range library so we sort the vector in place using less comparator comparing the client height and then in the end we iterate over those elements again and add them to the page and now of course this works and now i've already set the breakpoint let me proof first that it works and again we see the we see the we see the developer tools and we see here we can go into this in more detail and we see the even the stack trace coming from the top level javascript code and then down into the c plus plus code that we have just written so how did that how did that work and again another case of why is that actually sometimes a good idea to program in c plus plus instead of in that case in javascript programming application state in a reference counted language like javascript can be surprisingly difficult so let's say we want to add a button to some page and then when that button is created it registers itself as a click handler one of its member methods and now this does something and now you want to remove that button and what happens is that you can do all you want this button might live reference counted somewhere dysfunction callback keeps your object alive because it has captured it anybody might keep your object alive and it's very clear very hard to program clear state transitions in your application when when that's your language model and that's all you have and i always wonder when you encounter websites that suddenly get into a state where nothing works anymore nothing no click registers anymore the buttons don't work anymore always wonder how often that is the case like that javascript code is in some funky state that nobody understood anymore and you have to reload the page and start from the beginning in c plus plus we would do this in a more deterministic way we would could create the button you can register its click handler but we can remove it in the destructor as well and that destructor will run at some deterministic place and that can be a good idea and what we can do then is we can also destroy our callback and not sure that this is never going to be called again and then i think that's the last the last detail i will go i will go into what happens is that we create a helper object our little member function gets wrapped into a javascript object the javascript object is a function object of course and this function object is the function that will be actually called from the website and in that function on the javascript side we capture two things our c plus function pointer and our c plus plus this pointer that we've passed into it and when the javascript object is called it will just call back into the c plus plus world passing the function pointer into this pointer back again to c plus plus and when our c plus plus object goes out of scope before that then it can simply detach from its function object and now when we're calling back into c plus plus then we first call a generic function which will cast the function pointer when that function pointer is cast we have to unwrap the javascript arguments because we know the function signature and then we end up in the function that we've actually implemented and we support all the generic classes we have seen that so typescript has something like c plus plus templates we support this as well these typescript generics can have constraints they can for example say that some type should be an enumeration and we can translate that into a c plus template that is templated on the enumeration value and there are other kinds of constraints that will also be truly obviously translatable into c plus plus for example we could translate them as being requiring that some object is a base class of something else or it's derived from some class but this has not been implemented yet and again because of the differences in typing this is not quite the same so in typescript this would just require that t has the same properties as node whereas here we actually require an inheritance relationship and then i've you've seen those indexed access types which are pretty special javascript thing and i think it will skip skip over those we could implement them using some boost hana magic but the important thing is that we can cover the important cases types generics and function calls and the typescript and tool would be superseded by the by some something that was called the web assembly interface type proposal which is still in a very early phase which would allow webassembly to directly interface with javascript objects when they have some defined interface but here as in the c plus plus standardization it it's probably a good idea to have something to experiment with before that becomes standardized they're currently from this very simple implementation that has some performance implications unfortunately because these calls have to round trip a lot of strings to javascript so all these names function names have to be converted to javascript strings are then looked up on the javascript site does the object exist does it member function exist so this is a bit slow a bit slow as in relatively very slow but there are some ideas how to how to improve that performance and i don't think when you're making javascript calls to dom api that might not be the first thing you have to worry about but still that's also in progress okay so there are still some open challenges there's things called literal types for example where you can make types up out of permitted strings in script and integration is probably the big one that has to come first and with that i think i'm done i would love you to check out this tool and and tell me and write to me what you think about it and that concludes my talk and i thank you very much for your attention [applause] yes hey thanks for the work i i like this is a little bit silly question but really if you had a thousand lines javascript application developing a tool that converts types of the c plus plus she's just like it seems like a lot of work for herself it seems like that's true and we wouldn't have done that if there hadn't been a master student who wanted to do a master thesis at our company and that's the project we had for him ah that's really cool that's how that's how that came to life yes yeah i have just taken over that tool do you have any any escape patch currently like for instance with sir deck types and having the muslim and i just want to treat it as a string cannot use it without modifying the typescript file sorry can you repeat that again yeah you want to have an escape patch yeah like when you want to do something that the interface doesn't support yeah like just read it as a string and basically without modifying the existing typescript files or set so typescript developers don't get angry at me without modifying i thought you don't mean calling javascript untyped you know like like i have in typescript and and supported construct like literal types or something i try to convert them to any okay like so they're in typescript there's always this fallback time yeah and so the idea that's also the idea for the unscript integration when i propose that to to elon circai on the mailing list he said okay it would be cool to remove the existing api and like have this also as the untyped check fallback so that we could make any calls on any type for example right i haven't done that but currently we use the raw m script apis that sk patch okay thanks any other questions so just it's okay like he mentions there's a lot of overhead probably because like you have to jump between web assembly and javascript right and notice it wasn't like the type of your talk but maybe you can talk a little bit about how that works like how is it javascript interacts with webassembly sure i think so first this overhead is exclusively those strings i'm passing here so in a way in a way that's the worst possible way to do it what would be way more elegant and and faster would be to take the the javascript that i know i want to write here which is mylip.next and embed this in here as an in [music] a house is called inline javascript and then it would be optimized on the javascript side because it's not dynamic code anymore it's like a hard-coded statement and the javascript optimizer knows what it has to do and then i would just have to do all this argument conversion myself so i would have to make sure that the objects i'm passing in here are converted to integers and unwrapped on the javascript side and the return values of vice versa so i have to i have to take this api apart a bit and hard code the javascript part and do the wrapping unwrapping of arguments myself and then this performance penalty i think would go away largely performance penalty compared to just calling the function in javascript like if you so yes because yes without any verb assembly so you think that it's saying that webassemble i remember it was a problem but if you're saying that webassembly has no longer any overhead when calling javascript no i think i think there was some link on the website so the the the declaring an extern c function in webster and implementing it in javascript and calling it that way that is super fast and that's i think there was there were a lot of articles on the firefox developer blog how they made this as fast as possible there were problems with which sandbox does that live in and stuff but they optimize that because it's that's the simplest case and i think i would make i would like to make the calls like that to hard code a javascript but then i have to convert the argument to myself yeah i'm sorry he has the microphone wow sorry first of all thank you for the talk my question is regarding the debugging recently i was trying to debug my own web assembly code and it was really painful i can follow my breakpoints see how it is working but to see the values of the variables is really doesn't much helpful maybe do you have some suggestions or hints how we we can have an easy debugging on this but did you see it's because that's as good as it gets so you have the actual code and the actual variables or did you see the raw web assembly i can see this i can see that debugger stops on the breakpoint but the values of the elements for example there are also i think there are super now i don't have anything interesting here it's just a javascript object i think this needs one of the latest google chrome builds i think then there's an additional add-on that you that you need which is here the dwarf there is some visual code extension as well to have the same debugger on the visual studio code maybe i'm not sure about that i'm not sure about that but so this is compiled this is compiled to wasm with debug information and if you have the google chrome dev tools add-in then google chrome at least supports everything that a basic c plus ide needs it's not integrated with visual studio code or anything it's just in chrome but you can debug and you can see variables and stack traces okay so this is i think currently as good as it gets i will try once more because i can see the call call stack but i can not see the values of variables i think maybe you just need to one of the chrome builds or i'm using the chrome dev build could be that you need the chrome dev the developer branch of chrome i will double check thank you very cool library i'm actually a javascript developer so it's funny have you ever tried going the other way wrapping a c plus module and making a typescript interface to that no no i no i have not and i know there have been feature requests well they have been requests on the m script mailing list to go the other way and make that easier and ask me if i'm supporting that as well but we were only interested in the other way and maybe precisely also regarding the other question why we did that for a thousand line web application we we didn't do it for that web application but we so our our product is an add-in for microsoft office and we wanted to explore web programming in case people moved to office on the web how can we extend that how we can program for that how we can how can we port our existing c plus code base potentially into something that has to run in the browser so all that motivated that decision well thank you you're welcome not really a question just a short remark to his question about performance so calling between javascript and amp script is normally faster issue is when you touch the dom if you touch the dom from versions that's still at least in my knowledge is that it's really slow the what if you have to touch the document object model from webassembly okay no well yeah because then at least you have to you certainly have to wrap right and unwrap the javascript objects so do you have like a front-end library that you're using to display everything as well like in in javascript you mean to do to follow javascript ui yeah like because you're doing something way more complicated than these examples for displaying a ui yes but even even so i think this this little this little web application that i've shown actually it it doesn't it hasn't that's i mean it has a few combo boxes and a table we actually coded that by hand okay okay so you wouldn't wrap something like react or angular and no no it was again that was one of the first choice we had somebody he knew react he built something and it was pretty hard to understand like for a company that doesn't do that very often you needed something that was very easy to understand and then doing react for this instead of like explicitly programming your like the lifetime of those things turned out to be way more way harder to understand any other questions okay thank you for the talk thank you very much for your questions