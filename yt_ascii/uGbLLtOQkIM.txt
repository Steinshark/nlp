sometimes when we are creating checks in python we start to chain expressions and they start to become quite long and i want to address how we can fix that in this lesson with some of the inbuilt functions that a lot of us miss when learning python so in this example we have a function that's called main and we have three booleans but chances are you might even have more than that but here we're going to go ahead and check if is connected has electricity and has paid bills then we're going to print that our internet is active because all of those are true and our internet provider is happy so in return we're going to have access to the internet otherwise we need to contact them for information and of course if we run this since we've paid all of them it's going to evaluate the true and our internet is going to be active as soon as we make one of these false such as has electricity we're not going to have any internet and we can contact our provider to understand why as soon as we get some electricity and the same thing goes for if we want to check that at least one is correct so if all of these are or and the only thing we care about is that we have a connection then no matter what this is going to run as long as one is true but again we need to chain this and this can get really long if we decide to do it this way now what i'm about to show you won't necessarily shorten your code but it can be seen as a way to make it more concise and if you have a lot of booleans especially in an array this can be a very useful method and the first one we're going to be covering is called the any method but first let's go ahead and create a list of requirements so this will just make it clear to the user what is required we need is connected to be required has electricity and has paid bills we need all of these to be required and now instead of having this line of code we can go ahead and use the inbuilt function of all which takes an iterable of booleans so here we can insert the requirements and what it does is check that everything inside this array is true and if everything is true it's going to evaluate to true and it's going to print that our internet is active and as soon as we run that we're going to get an active internet but if we didn't pay the bills we can rerun that and it's going to inform us that we should contact our service provider so in terms of readability i really like this approach even though it does require you to create a new variable if you do not have this already sometimes you might have a list of 20 booleans that have to be true for something to pass so that's where i think all would really shine and for the next example i went ahead and created a slightly different block of code so this checks who has money so if mario has money or luigi has money or if peach has money and if one of these people have money it's going to say that someone has to pay otherwise no one has any money and this time we're going to be using or which of course checks that at least one of these expressions evaluate to true and again this can get really long if you decide to chain it especially if you have four or more booleans this can become just annoying to look at so again we're going to go ahead and create a list called people with money and that's going to equal all of these people so mario luigi and peach and instead of using this syntax over here we're going to use another inbuilt function called any and this checks that at least one of the elements inside the array is true so we go ahead and say that we want to insert the people with money so that if any person has money someone is going to pay otherwise no one has money to pay and if we run this we're going to find out that since peach has money to pay it's going to say someone has money to pay but as soon as we change that to false it's going to say that no one has money to pay because none of these people evaluate to true and again i would mostly recommend this with big lists that have lots of expressions in case you need to make sure everything is true or in case you need to make sure at least one of the elements is true these are some great inbuilt methods to do the following with otherwise for small lists of let's say even just two people it just makes more sense to use and and or because it's just so small and so fast to write and is much more pythonic but anyways guys i hope you enjoyed this lesson let me know what you think about the all and the any inbuilt functions and whether you use them or not in your programs but as always thanks for watching and i'll see you in the next lesson