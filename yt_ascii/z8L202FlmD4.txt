a database stores data, but 
that is not its main purpose. a cardboard box can also store 
data - photos, cards, human organs,   what have you. but we would not call this 
box a database. it is just a data store. but what if we marked and collated the photos and   cards in such a way that lets us 
summarize them and draw insights? now, that sounds a bit more like 
a database. a database helps you   discover and derive new knowledge that 
did not exist before you ran the query. the most popular database query language is sql. 
today, it and the relational model databases it   works with are very popular. i learned it myself 
a while ago. you ever wonder where it came from? i did too. in this video, we look at the 
early history of the database software   industry and the incredible work and 
debates that led to the creation of sql. ## beginnings the first real database software 
emerged in the early 1960s. the integrated data store or ids was 
created by charles bachman and homer   carney of general electric. bachman had 
been hired from dow chemical to work on   a transaction-oriented processing system 
for ge's low voltage switchgear department. they wanted something that can process 
all the transactions coming in day and   night - new orders, new factory feedback, queries. so bachman put together a series of 
things that had appeared in previous   research papers. these would be seen 
as critical pieces of modern databases: a data model that mapped how users will 
see or interact with the data to how that   data was actually being physically 
stored within the computer hardware. a data description language that defined 
the database's structure. so kind of like   a blueprint of how data in the database 
should be stored and related to each   other. with the constraints defined in case 
someone tries to insert something wrong. a data manipulation language that allowed users   to manipulate the data. the key actions 
were store, retrieve, modify, and delete. bachman finished the first version of ids in 
1961-1962. it was adopted internally in 1963,   and then later distributed free of charge 
to customers of the ge 200 computer. remember, this was before ibm 
unbundled software and hardware,   so few people paid for software back then. the ge-series computers kept on using the ids 
even after ge sold their computer division to   honeywell, and then bull. bull computers 
are still used in the norway banking   industry. so as of 2009, there are courses 
teaching bull ids/ii, an upgraded version. ## idms there were a few other major 
database softwares back in the 1960s. bf goodrich - yeah, the tire company - 
their computer division later rewrote the   ims software to create the integrated 
database management system or idms. cincom systems' total database product was also   quite prominent in the day. founded 
back in 1968, the company seems to   be still around today - one of the bigger 
independent software companies out there. its founder tom nies is the longest 
actively serving computer industry   ceo. which is pretty remarkable. over 55 years! anyway, the ims, idms and - and i think 
the total database too - practiced what   is called the "network model" 
or "codasyl model" of databases. in this model, each data record 
is represented as a node within   space and can have multiple parents and children. over time, you get a network 
- which offers a great deal   of flexibility. that has upsides and downsides. in order to get the record you want out of 
this network, then you needed to write a query   that entered the database at a certain 
point and "navigate" to the right one. so if you wanted to find a blue-tagged deer 
in nara park, then the query would first say   something like "find park in nara". you 
then get a set of records of deer in the   park. now you iterate through them one by one, 
checking the deer tag records for a blue tag. in 1973, bachman received the acm 
turing award - considered by me   to be the nobel of computing - for 
"his outstanding contributions to   database technology". he was the 
first recipient without a phd. at the acceptance ceremony, he gave 
a speech titled "the programmer as a   navigator". it urged us to think of the 
database software and its programmer as   navigating this network space, trying to 
find the right data record for its purpose. ## ims another major database software of 
the day - released in 1968 with its   popular system/360 line of computers - was 
ibm's information management system or ims. i know. ids, idms, ims. it 
can all get very confusing. ibm originally created the ims 
in 1966 at the request of nasa   for the apollo space program. it 
was used to keep track of the bill   of materials for the two million 
parts inside the saturn v rocket. unlike ids and idms, ims stored data like trees. records are organized in 
parent-child relationships,   starting from the top and going down. we must always enter from the top 
of the tree and go down from there. a record can have "children" below 
it containing the extra information   associated with the parent item, 
which can be accessed using pointers. for more information about how 
ims worked and its shortcomings,   i suggest this october 2017 
article by two-bit history. not unsurprisingly, ims is still developed 
and used today in banks, insurance companies,   hospitals and what not. it is one of ibm's 
top performing products. probably because   it is very fast and can process hundreds 
of thousands of transactions each second. so the hierarchical model worked well. but 
it still suffered limitations. for instance,   it allowed for one-to-many relationships, 
but not many-to-many relationships. and since we must always enter the data from 
the top of the tree, we must always traverse   the tree to get to a certain data point. if 
the tree is deep, then it might take some time. if we wanted to change that, then we would 
need to plant new trees. metaphorically. not   literally. but now that means we have 
duplicate trees storing the same info,   just in a different order. which 
is annoying. what can we do? ## codd the year ims made its big debut, 
a british-born american citizen   named edgar frank codd - he goes by ted - 
took a big look around the database world,   was disappointed by what he saw, 
and decided to try something new. born in 1923 at the isle of portland in 
dorset, england, ted codd was the youngest   of seven children. his father was a leather 
manufacturer and his mother, a schoolteacher.   he was educated at oxford as a mathematician, 
which later influenced his approach to databases. during world war ii, codd flew bomber 
planes for the royal air force - likely   rising to the rank of flight lieutenant. his 
flight training was in the united states,   and he seemed to have enjoyed it there. after 
the war, he went to the us and joined ibm. in 1953, he transferred to canada to help set up a   data processing department 
for ibm. per his obituary,   his primary reason for doing so was to escape 
the oppressive atmosphere of the mccarthy era. in canada, he had a small staff of programmers, 
and they worked on a program to solve differential   equations for an air-to-air guided 
missile. his staff remember him as: > "a pleasant and hard working individual   who had high standards for his 
staff and treated them fairly". he returned to the united states in 1957, 
earning a phd at the university of michigan,   ann arbor. after that, he joined ibm's research 
laboratory in san jose, which did r&d on disk   drives. there, he began his theoretical 
work on databases - basically by himself. in 1969, he published a game-changing 
paper "derivability, redundancy,   and consistency of relations 
stored in large data banks".   that was an ibm research paper 
that circulated only internally. a year later, he publishes "a relational model 
of data for large shared data banks". this 1970   paper is far more well known, but many of 
its ideas were already in the 1969 paper. in these papers, codd proposed a new 
approach for storing and accessing data   within computers - he called it the "relational 
data model". what is that? let's talk about it. ## the relational model ids, ims, and idms represented their 
data using pointers and records. so if we have a set of records for a 
company's employees and their departments,   we would have a record for a department. the department record would have that 
department's name, building number, and so on. now, we want to store who the 
department employs - their employee. that is held in another set of records,   which contain the employee's 
name, salary, birth date, so on. to link the department with the employee,   what we would do back then is to set up 
pointers that link the former to the latter. the database's structure is defined by 
how all of these pointers are set up.   which is often done by the database's 
original architect, per their whims. remember what i said earlier about the ims 
hierarchy tree system? if the information   we want is very deep down the hierarchy, 
then we might have to traverse through a   whole lot of pointers to get to the 
info we want. we would also have to   know how those pointers are set up and 
where they lead. this is all annoying. codd's relational data model seeks to do away 
with that. it starts with a single tenet: > all information in the database is to 
be represented in one and only one way,   namely by values in column 
positions within rows of tables. so if we go back to the prior example we just 
talked about, information relating to the   company's departments would be put into a table. 
this use of tables makes the data "structured". each row in the department table represents an 
individual department. and each column within   that row contains values for that department 
- name, building number, what have you. a similar table will exist for 
employees. how do we link together   values in the departments and employees 
tables without the use of pointers? both   tables would have a shared value column 
that match up, creating an association. the department table would have a column with 
a unique id on it - "department number or id".   this is what we call the "primary 
key", and it is unique to the row. the employee would have a column on its 
table called "department id" - the id of   the department employing the employee would 
go here. this is called the "foreign key",   because it represents a 
relationship to a foreign table. through the use of these foreign keys, 
all kinds of relationships - one-to-one,   one-to-many, many-to-many - can be created. these 
would be accomplished through the use of joins. ## navigator v. independence if you recall, charles 
bachman, the creator of ids,   popularized the idea of the 
programmer as a navigator. the database - guided by the programmer - needed 
to traverse networks of links and pointers to   get to the right node of data. this was the 
concept that won bachman his turing award. codd did not like this idea. as his colleague 
donald chamberlin later put it, he felt that the   navigational approach required the programmer 
to really know the database and its network. like a captain on the stormy seas. codd - despite having a fish-y name - did 
not want this. data queries shouldn't have   to require the programmer to know 
the database so intimately and to   keep all that info in their head. the 
computer should figure that out on its   own. the programmer should only have 
to tell the computer what they want. so his relational data model separated the 
data's physical representation from its   logical design. the programmer no longer 
has to think about pointers or links,   but rather the abstract relationships between 
things they want - like departments and employees. codd called this idea "data independence" and 
believed that it would boost productivity as   the programmer would now only 
need to internalize a single,   consistent system. and the resulting queries 
were indeed short and easy to understand. he also pitched it as a way for ibm to sell 
more hardware. this relational data model   would enable more average people 
to ask questions about their data,   which translated into more hardware sales for ibm. ## the birth of sql codd's papers reverberated 
through the academic world,   but did not make a big impact in the 
commercial space right off the bat. after all, those companies already had 
their navigational databases. and there   wasn't actually a software implementing 
his ideas yet in existence. and codd had   little interest in the nuts and bolts of 
software. he preferred being a visionary,   traveling the world promoting his ideas. he did indeed convert people. in 1972,   two ibm employees donald chamberlin and 
ray boyce at yorktown heights in new york   saw examples of codd's queries and were 
won over. but they did feel the ideas   were very math-heavy and not friendly to 
non-mathematicians. too many greek letters. so they took a crack at a data query language 
to do something like what codd advocated,   but without all the complicated 
greek. the language was called square,   or specifying queries as relational expressions. by now there were multiple projects across ibm 
working on codd's ideas. at the end of 1972,   ibm management decided to consolidate all 
the teams on those projects to the san jose   lab. chamberlin, boyce, and others moved to 
california so they can work with codd himself. after moving and settling down, chamberlin and 
boyce set out on a redo of their square language.   square was good but had these unintuitive 
subscripts that were hard to type on a keyboard,   and you couldn't really get a sense of what 
you actually wanted from just reading it. so they went ahead and made a new 
relational language. one that retained   the notion of mappings, but was based 
on english keywords that you can type.   since it followed up square, they called it 
structured english query language, or sequel. later due to a trademark issue from 
the british aircraft manufacturer   hawker siddeley they had to take 
the vowels out. thus, we have sql. at the may 1974 sigmod conference,   chamberlin and boyce published and 
presented the first paper about sequel. sadly, a month after presenting that first paper, 
ray boyce died suddenly from a brain aneurysm at   the age of 27/28, leaving behind a wife and 
child. don chamberlin remembers him fondly. ## the great debate at that same sigmod conference, charles 
bachman and ted codd - the leaders of the   navigational and relational models of databases - 
famously debated - some called it a "discussion". it was a legendary meeting in software database 
history. it was set up the previous year,   with bachman fresh off his turing award win. 
at the montreal share conference in 1973,   he gave a dry run of his turing 
acceptance speech to an audience. codd had been in that audience and was described 
as being extremely agitated throughout that talk.   the instant bachman finished, codd jumps up to 
the microphone - a la kanye west - and says: > i'd like to congratulate charlie on 
the turing award. that's really great,   and he deserves it; he's a very nice guy 
... none of that affects the fact, however,   that what he is saying in his paper is dead wrong 
... there are so many things that need to be said   in order to deconstruct charlie's argument 
but it would not be appropriate to do now ... > so instead i would like to issue 
a challenge that charlie and whoever   else he wants meet with me, 
and i'll have some support,   at the next share meeting. and we'll 
have a formal debate on these matters the debate time was pushed 
from the next share meeting   to the aforementioned sigmod 
conference - now sigmod/pods. codd apparently studied and prepared a 
great deal for the debate-not-debate,   while bachman and his acolyte did 
not. it was set up as presentations   given by the two, with accompanying 
presentations from their supporters. codd argued that the network/codasyl model 
- as well as the hierarchy model - was too   complicated to be practical. it would be hard to 
optimize and too inflexible for most situations. for instance, take a marriage ceremony. 
recording a ceremony would have the ids   for the bride and groom. or groom/groom 
or bride/bride. whatever have you. but then with a network model database,   we would need to add the minister too. wrapped 
up in the network or tree - in the case of ims. inadvertently and hilariously making 
every marriage a 3-way, database-wise. bachman and his followers argued back 
that the relational model cannot be   implemented efficiently. their network 
model can do tables too. and so on. who knows how it really turned out but the 
academics in the audience seemed to have   been more swayed by codd's logical arguments. at 
least according to codd's friends and followers. michael stonebraker, database pioneer 
and inventor of ingres and postgres,   had been there and said that neither 
side made their point very clearly. in 1981, codd received the turing award too - 
less than a decade after bachman's. it is an   indication of just how fast the computer and 
software fields were moving in those days.   two ideas so opposed to one another getting the 
same prestigious award so soon, that amuses me. but back in 1974, there was one thing bachman's 
side did have at the debate: real products in   the field. codd might have presented some 
fantastic ideas that showed potential,   but relational model database software of 
the time was seemingly nowhere to be found. ## conclusion but that was soon about to change. 
the multi-billion dollar database   software industry was about to take off. there actually were a few relational model 
database softwares under development at the   time at ibm and uc berkeley. slowly 
working their way through things. but it took the rise of a vicious 
new competitor in the late 1970s   to open everyone's eyes to the bonanza 
in front of them. the industry rapidly   adopted the relational data model and 
sql thereafter. that commercialization   would create some of the richest men in 
the world. a story for another video. but the progenitor of those ideas, ted 
codd, did not share in those gainz. codd   became an ibm fellow and retired at the age 
of 61 after suffering injuries from a fall. after that, he did some consulting, 
making a good living but nothing   like the millionaires and billionaires who 
became generationally wealthy from his ideas. he passed away in 2003 in florida 
at the age of 79 years old. charles   bachman passed away in 2017 at the 
age of 92. amazing lives. and the   products that have sprung from 
their ideas live on to this day.