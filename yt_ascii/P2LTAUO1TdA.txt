if i have a vector sitting here in 2d space, we  have a standard way to describe it with coordinates. in this case, the vector has coordinates 3, 2,  which means going from its tail to its tip involves moving three units to  the right and two units up. now, the more linear algebra-oriented way to describe coordinates is to think  of each of these numbers as a scalar, a thing that stretches or squishes vectors. you think of that first coordinate as scaling i-hat,  the vector with length 1 pointing to the right,  while the second coordinate scales j-hat, the vector with length 1 pointing straight up. the tip-to-tail sum of those two scaled vectors  is what the coordinates are meant to describe. you can think of these two special vectors as encapsulating  all of the implicit assumptions of our coordinate system. the fact that the first number indicates rightward motion,  that the second one indicates upward motion, exactly how far a unit of distance is,  all of that is tied up in the choice of i-hat and j-hat as the  vectors which are scalar coordinates are meant to actually scale. any way to translate between vectors and sets of numbers is called a coordinate system,  and the two special vectors i-hat and j-hat are called the basis  vectors of our standard coordinate system. what i'd like to talk about here is the idea of using a different set of basis vectors. for example, let's say you have a friend, jennifer,  who uses a different set of basis vectors, which i'll call b1 and b2. her first basis vector, b1, points up and to the right a little bit,  and her second vector, b2, points left and up. now take another look at that vector that i showed earlier,  the one that you and i would describe using the coordinates 3,2,  using our basis vectors i-hat and j-hat. jennifer would actually describe this vector with the coordinates 5 thirds and 1 third. what this means is that the particular way to get to that vector using her two basis  vectors is to scale b1 by 5 thirds, scale b2 by 1 third, then add them both together. in a little bit, i'll show you how you could have figured out those two numbers,  5 thirds and 1 third. in general, whenever jennifer uses coordinates to describe a vector,  she thinks of her first coordinate as scaling b1,  the second coordinate as scaling b2, and she adds the results. what she gets will typically be completely different from the  vector that you and i would think of as having those coordinates. to be a little more precise about the setup here, her first basis vector,  b1, is something that we would describe with the coordinates 2,1,  and her second basis vector, b2, is something that we would describe as negative 1,1. but it's important to realize from her perspective in her system,  those vectors have coordinates 1,0 and 0,1. they are what define the meaning of the coordinates 1,0 and 0,1 in her world. so in effect, we're speaking different languages. we're all looking at the same vectors in space,  but jennifer uses different words and numbers to describe them. let me say a quick word about how i'm representing things here. when i animate 2d space, i typically use this square grid. but that grid is just a construct, a way to visualize our coordinate system,  and so it depends on our choice of basis. space itself has no intrinsic grid. jennifer might draw her own grid, which would be an equally made up construct meant  as nothing more than a visual tool to help follow the meaning of her coordinates. her origin though would actually line up with ours,  since everybody agrees on what the coordinates 0,0 should mean. it's the thing that you get when you scale any vector by 0. but the direction of her axes and the spacing of her grid lines will be different,  depending on her choice of basis vectors. so after all this is set up, a pretty natural question  to ask is how we translate between coordinate systems. if for example, jennifer describes a vector with coordinates negative 1,2,  what would that be in our coordinate system? how do you translate from her language to ours? well, what her coordinates are saying is that  this vector is negative 1 times b1 plus 2 times b2. and from our perspective, b1 has coordinates 2,1, and b2 has coordinates negative 1,1. so we can actually compute negative 1 times b1 plus 2  times b2 as they're represented in our coordinate system. and working this out, you get a vector with coordinates negative 4,1. so that's how we would describe the vector that she thinks of as negative 1,2. this process here of scaling each of her basis vectors by the corresponding  coordinates of some vector, then adding them together, might feel somewhat familiar. it's matrix-vector multiplication, with a matrix whose  columns represent jennifer's basis vectors in our language. in fact, once you understand matrix-vector multiplication as applying a certain linear  transformation, say by watching what i view to be the most important video in this  series, chapter 3, there's a pretty intuitive way to think about what's going on here. a matrix whose columns represent jennifer's basis vectors can be  thought of as a transformation that moves our basis vectors,  i-hat and j-hat, the things we think of when we say 1,0 and 0,1,  to jennifer's basis vectors, the things she thinks of when she says 1,0 and 0,1. to show how this works, let's walk through what it would mean to take the vector  that we think of as having coordinates negative 1,2 and applying that transformation. before the linear transformation, we're thinking of this vector as a certain  linear combination of our basis vectors, negative 1 times i-hat plus 2 times j-hat. and the key feature of a linear transformation is that the resulting vector  will be that same linear combination but of the new basis vectors,  negative 1 times the place where i-hat lands plus 2 times the place where j-hat lands. so what this matrix does is transform our misconception of what  jennifer means into the actual vector that she's referring to. i remember that when i was first learning this, it always felt kind of backwards to me. geometrically, this matrix transforms our grid into jennifer's grid,  but numerically, it's translating a vector described in her language to our language. what made it finally click for me was thinking about how it takes our  misconception of what jennifer means, the vector we get using the same  coordinates but in our system, then it transforms it into the vector that she  really meant. what about going the other way around? in the example i used earlier this video, when i had the vector with coordinates 3,  2 in our system, how did i compute that it would have coordinates  5 thirds and 1 third in jennifer's system? you start with that change of basis matrix that translates jennifer's language into ours,  then you take its inverse. remember, the inverse of a transformation is a new transformation  that corresponds to playing that first one backwards. in practice, especially when you're working in more than two dimensions,  you'd use a computer to compute the matrix that actually represents this inverse. in this case, the inverse of the change of basis matrix that  has jennifer's basis as its columns ends up working out to have columns 1 third,  negative 1 third, and 1 third, 2 thirds. so, for example, to see what the vector 3, 2 looks like in jennifer's system,  we multiply this inverse change of basis matrix by the vector 3,  2, which works out to be 5 thirds, 1 third. so that, in a nutshell, is how to translate the description of  individual vectors back and forth between coordinate systems. the matrix whose columns represent jennifer's basis vectors but written  in our coordinates translates vectors from her language into our language. and the inverse matrix does the opposite. but vectors aren't the only thing that we describe using coordinates. for this next part, it's important that you're all comfortable  representing transformations with matrices and that you know how  matrix multiplication corresponds to composing successive transformations. definitely pause and take a look at chapters 3 and 4 if any of that feels uneasy. consider some linear transformation, like a 90 degree counterclockwise rotation. when you and i represent this with a matrix, we  follow where the basis vectors i-hat and j-hat each go. i-hat ends up at the spot with coordinates 0, 1,  and j-hat ends up at the spot with coordinates negative 1, 0. so those coordinates become the columns of our matrix. but this representation is heavily tied up in our choice of basis vectors,  from the fact that we're following i-hat and j-hat in the first place to  the fact that we're recording their landing spots in our own coordinate system. how would jennifer describe this same 90 degree rotation of space? you might be tempted to just translate the columns  of our rotation matrix into jennifer's language. but that's not quite right. those columns represent where our basis vectors i-hat and j-hat go. but the matrix that jennifer wants should represent where her basis vectors land,  and it needs to describe those landing spots in her language. here's a common way to think of how this is done. start with any vector written in jennifer's language. rather than trying to follow what happens to it in terms of her language,  first we're going to translate it into our language using the change of basis matrix,  the one whose columns represent her basis vectors in our language. this gives us the same vector but now written in our language. then apply the transformation matrix to what you get by multiplying it on the left. this tells us where that vector lands, but still in our language. so as a last step, apply the inverse change of basis matrix,  multiplied on the left as usual, to get the transformed vector but now in  jennifer's language. since we could do this with any vector written in her language,  first applying the change of basis, then the transformation,  then the inverse change of basis, that composition of three matrices gives us the  transformation matrix in jennifer's language. it takes in a vector of her language and spits out  the transformed version of that vector in her language. for this specific example, when jennifer's basis vectors look like 2,  1 and negative 1, 1 in our language, and when the transformation is a 90 degree rotation,  the product of these three matrices, if you work through it, has columns 1 third,  5 thirds, and negative 2 thirds, negative 1 third. so if jennifer multiplies that matrix by the coordinates of a vector in her system,  it will return the 90 degree rotated version of that vector expressed in her coordinate  system. in general, whenever you see an expression like a inverse times m times a,  it suggests a mathematical sort of empathy. that middle matrix represents a transformation of some kind as you see it,  and the outer two matrices represent the empathy, the shift in perspective. and the full matrix product represents that same  transformation but as someone else sees it. for those of you wondering why we care about alternate coordinate systems,  the next video on eigenvectors and eigenvalues will give a really important example  of this.