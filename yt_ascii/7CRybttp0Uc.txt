hello, everyone! i'm james murphy. and welcome to mcoding, where we try to get a little 
 better at programming each episode so that we can ultimately 
 determine whether or not we're in the matrix. in today's episode, what are python's `future` imports. while they look like normal 
 import statements, they're anything but. this video is sponsored by me. thank you to me for sponsoring myself. did you know that i'm available for python and c++ consulting, 
 contracting, training, and interview prep services? again, let's give a round of 
 applause to me for sponsoring myself. this is the future module. it's a real module. 
 but it doesn't really do anything. it defines some constants and has 
 a class that represents some metadata. and then it just has a bunch 
 of metadata about the future features. but, beyond just keeping track of this metadata, the code in this file doesn't 
 implement any of those features. what actually happens is python looks for 
 these future imports whenever it compiles a module. and then sets a specific feature flag depending 
 on which future imports you used. for instance, if we from future import `annotations`, then the `co_future_annotations`
 flag will be set in the compiler. let's take a look at the c code 
 that this actually affects during compilation. i know compared to python, this might look very verbose. but i promise you don't need 
 to know any c in order to understand this. this is the function that gets called to 
 convert an annotation in an argument into bytecode. the important part is right here. we have a set of features 
 represented by a bunch of bit flags, and we do a bitwise and with 
 the feature flag that we're interested in. in this case, `co_future_annotations`. if the feature flag is set, we use this visit macro, 
 which just expands to calling this function. the bytecode operation this 
 corresponds to is then loading a new constant. the constant that we load is 
 the annotation expression as unicode, i.e., treat the annotation as a string. let's see that in action. here, we have a `node` class 
 with an annotation for its `data` member. we can access the annotations at runtime like this. notice that what gets printed out 
 is that the annotation has the string 'int' in it. but if we comment out the future import, then we see the annotation 
 contains the actual `int` class object. so, a future import is doing 
 something really fundamental. it's completely changing the 
 way that python interprets your source code. it can literally cause python 
 to generate different bytecode. and therefore completely 
 change the meaning of your program. so, what are all of these future imports? and why are they used instead of just 
 telling a user to upgrade to the next version? after all, if i have a new feature 
 like the match statement from python 3.10, it's easy to tell people, "if you want to use the match 
 statement, you need to upgrade to 3.10." but if you were already using 
 annotations in a previous version, upgrading and changing the behavior can break old code. we don't want to go around just 
 breaking people's old code for no reason. we need a really good reason if 
 we're going to do something like that. this is where python might differ 
 from some languages like c and c++. in c++, backwards compatibility is 
 a much stronger priority than in python. a broken, incomplete, or not well-thought-out 
 feature might very well stay in the language forever. in python, you get about 
 three to five years to upgrade. and the way that you opt into 
 an upgrade early is by using a future import. so, why do we need a future import for annotations? what's wrong with just 
 sticking the class object in there? well, if an annotation is just 
 treated like a normal expression, that implies that the annotation should 
 be defined before the thing that it's annotating. this makes it impossible to define a 
 recursive data structure like a linked list. when i try to annotate 
 the `next` pointer in the linked list, i'm in the process of defining the `node` class. so the `node` class is not 
 defined yet, and hence i get a name error. the annoying solution to this 
 is to put quotes around your annotations. and then hope that your editor 
 and your type checker understand. as we already saw, the future solution to this is to 
 just automatically always treat annotations as strings. very few programs actually 
 care to access type hints at runtime. but those that do can use `typing.get_type_hints` 
 to evaluate the strings back into class objects or whatever. eventually, the behavior of the future 
 import will just become the default behavior. but do keep in mind that with future 
 imports, the behavior is not always completely settled.   when you opt in early to a feature, it's possible 
 that that will change before the feature actually comes out. in fact, with annotations specifically, there's a decent chance this behavior will just be 
 replaced by some kind of lazy computing of the annotations. that's definitely something to watch out for. but i don't really worry about it. and in fact, i use this particular 
 future import in almost every file that i define. so, what are all the rest of the future imports? when in doubt, of course, go to the source. the good news, since these are 
 breaking changes after all, is that there are only two that even apply to python 3. this one is just an easter egg. as you can see, it's set to appear in python 4. all the rest are in python 2. `unicode_literals`: allowed you to create 
 bytes literals like this using the `b` and then quotes. `print_function`: introduced the `print` function. `with_statement`: introduced the `with` statement. `absolute_import`: changed and clarified 
 the way that absolute and relative imports work. `division`: made the single 
 slash always mean float division and introduced the double slash to mean int division. `generators`: introduced generators. and `nested_scopes`: allowed 
 the ability to define nested scopes and guaranteed that they 
 would be computed at compile time. in particular, this allowed for 
 lambdas or inner functions to access variables that were defined inside 
 another enclosing function scope. and that's all the future imports 
 except for one, which is `generator_stop`. `generator_stop` was introduced because 
 of the following behavior. we want the generator to yield one, two, three, four. pretend one, two, three, and four are 
 just stand-ins for some complex operations. maybe two and three are 
 particularly complicated to compute. so we factor it out into a subgenerator. but we made a mistake in our subgenerator. we're only yielding one thing 
 instead of two things before we're done. however, we have two unguarded calls to `next`. the first call works as normal and returns two. then, for the second call, we hit 
the `return`, which raises a `stopiteration`. so what's effectively happening is a `stopiteration` 
 is getting raised at this point in the generator. we're not inside a loop. we made a call to `next`, and we 
 got an exception, which is propagating up. but nothing's shown to the user. that's because we're in a generator, and that 
 `stopiteration` gets raised all the way up to this `for` loop. normally, when a `for` loop receives a 
`stopiteration`, that means we're just done iterating. so, the program prints out one, two, and then stops. instead of raising the exception 
 and showing the user an error message. we silently loop over 
 less data than we intended to. so, i really don't want `stopiteration` in 
 generators to cause `for` loops to just terminate. if i wanted a `for` loop to just terminate, i can always just return from the function, which will end up raising a`stopiteration` in the `for` loop. but having an unhandled `stopiteration` 
 propagate outside a generator is almost always a bug. so, `from future import generator_stop`, and now any `stopiteration` that's raised 
 out of a generator gets turned into a runtime error. no more silent errors - we get a big, beautiful 
 error message telling us exactly where things went wrong. the future import allowed us, starting 
 in python 3.5, to opt into this new behavior. but hopefully, you or your company are
 now using a version of python that's at least 3.7.   it's fine to leave the future import in. 
 it doesn't hurt anything. but as of 3.7, you can delete 
 it, and that's now the default behavior. so realistically, the only one that you really 
 need to worry about is `from future import annotations`.   and a quick tip that you might not have realized: since annotations are now just strings, i can actually start using typing features 
 from way later versions. for instance, this bar notation for the 
 union of types was introduced in python 3.10. but it's working just fine in 3.7. this works completely fine as long as you're not 
 trying to actually evaluate those annotations at runtime. if you're doing that, 
 then you just need to upgrade. actually, if you dig into the c source code, 
 there's one more future import you might be interested in. anyway, that's all i've got. and finally, i want to give 
 a huge shoutout to neil rashania. thank you to neil for subscribing 
 at the factorial level on patreon. i really appreciate the support. of course, thank you to 
 the rest of my patrons as well. don't forget to subscribe, leave a comment. and as always, slap that 
 like button an odd number of times. see you next time!