let's just let's just hear what he has to say just if you build a program and it's really used a lot you're going to want to modify it at some point and the real world is you're not going to go back start from scratch and redo everything you're going to start patching it and we've seen that happened and as it goes on that program gets harder and harder to deal with harder and harder to modify eventually you know either the code is going to be thrown away or it's going to be written from scratch so you know you start patching things you know you get sloppy but if you don't do this design right from the beginning then every piece of the code you write is a patch and you start out from day one with a mess and i'd love to thank this quote of eisenhower who said no battle was ever won according to plan but no battle was ever won without one if you build a program and it's really used a lot you're going to want to modify it at some point and the real world is you're not going to go back and start oh it started over again wow that was so perfectly contiguous that i actually just kept on just kept on going through a program i could have almost listened to it for another like a little while there i really like this take a whole bunch welcome to costco serious so bad at this hold on i'll say thank you in a second i really i really really really really really like this take a whole bunch and the reason why is that i think there's a lot of truth which is i'm gonna take a different kind of maybe path than this guy was taking right here this leslie guy or what he's trying to mean maybe we're missing what he's trying to mean but effectively every program falls into exactly what he is saying that it eventually becomes a patch only upgrade features all this is you took something no matter how well it was initially designed you just keep on adding and adding and adding and adding and it does cause an entire like you know it just eventually the program becomes super hard to develop against and i don't think there exists anything in which you can just forever add features and forever have a well-designed program i think they're just there comes a point no matter what that it just falls apart because the initial assumptions from day one just aren't there on day two three and four and so on and so i just i love this take because i think that often and i think this is kind of the problem i i'm gonna i'm gonna i'm calling out javascript though i'm i'm positive it exists elsewhere i think javascript just has this unique ability to continuously abstract so it just has the ability to really keep going and just keep on getting more and more abstract to solve or change problems that change kind of the space of the problems and so javascript like what i see is just like a continuous abstraction to try to prevent this problem from happening every single project you will ever take on will eventually fall apart and become harder and harder to write features for it is never like i've never been on something in my in my entire time in the web in the web professional world that doesn't that doesn't fall apart and needs to be like vastly reconsidered and so it's just that javascript allows for the fastest most expressive way that i know of to abstract a problem and so you ever tried react i wrote react professionally for two years but i don't know it's just something to really think about which is is the pursuit of continuous abstraction to make the theoretical problem of software falling apart always a good idea like can you always constantly try to find this this place that exists in which something actually doesn't have any flaws that you can continuously keep on going or does it eventually always fall apart now there are some there are a few things that aren't that way and i know you can disagree with it because there is always something that that breaks this rule right the linux kernel i'm sure breaks this rule but there's also bugs that have existed in the linux kernel that have been known about for 20 plus years and that like that that's all there is to it right they just exist forever because no one can really fix it and so it's like is that a problem i don't know i don't know if it's a problem is that just like the the real the reality of what we live in yeah and i think that if you think that there's some framework something out there that is going to make this problem go away or somehow make it better i think you're just deluding yourself into building something that eventually will happen no matter what and then ice bar is a good framework will make that feeling not happen as fast right that's all it is a good framework just simply prevents that feeling from happening sooner a bad one just makes it happen quicker and i think it's all in the end it's all gonna suck no matter what you do welcome to software engineering i hope you like david goggins because you're going to be doing self-punishment for the next 30 years and it's fantastic it somehow feels good it's kind of like running a marathon except for when you're done running a marathon we hand you another marathon who's gonna carry the tickets who's gonna close the tickets who's gonna close the tickets