hi everyone today we're going to be finishing off this mini project by adding in a game over screen before we get to that though let's just make sure that these falling blocks destroy themselves once they sort of fall off the bottom of the screen so if we go into the spawner class you can see that we figured out that half the screen height in world units is simply the main camera's orthographic size so if we copy that and go into the falling blocks class we can create a float variable something like the visible height threshold so that visible height threshold will be equal to half the screen height minus the block's own size which is just transform. local scale doy then in the update method we can just do a check to see if the block's position has fallen below that visible height threshold so if transform do position on the y ais is less than the visible height threshold then we want to destroy the falling block so we can simply say destroy game object so if we save that now and play we should see that as this falls off the screen the object gets destroyed all right so now for the game over screen let's go to the game object menu and add a canvas as well as a text element and if we just zoom out a bit we can drag this text element up somewhere near the top of our canvas and let's just centeralign this text and change it to read something like game over and we can also increase the font size you'll see once it becomes too big for the bounding box it just disappears so let's resize the bounding box now you'll see that if we change the size of the screen the size of the ui doesn't change with it which is a little bit frustrating so what we can do is go into the canvas and instead of having it set to a constant pixel size we can tell it to scale with the screen size so now if we just resize this once again get it how we want it let's say something like that and maybe make this a nice bright white now if we change the size of the screen you can see it scales along with it we might also want a custom font so let's go into our materials folder and just drag something in i'll use something called mockup and just drag that into the font slot over there let's now go into our text object and let's rename this heading and then if we just duplicate that with command d we can drag it down and let's make this a little bit smaller and have this read something like press space to play again all right it's going to need to be even smaller than that and maybe make this a bit darker so it's not stealing attention away from the heading and we can just call this our play again instruction and then let's duplicate this drag it down here we're going to want to display the number of seconds that the player survived for so let's say seconds survived colon and then make another textt element which is just going to display the number of seconds but in very large texts i'm going to make this bounding box nice and big and scale this up to be quite enormous let's see how well this fits on say with three characters that looks good or maybe make it a tiny bit smaller and we can change this color to maybe a nice red all right something like that looks prettyy good i probably want to make this second survived heading a little bit brighter maybe like that let's just rename these things i'll call this the seconds survived heading and this just simply second survived all right so if we just quickly enter play mode i quite like it that once the game ends the blocks continue falling in the background it just adds some sort of visual interest to the game over screen but with them as bright as they are it can be a little bit distracting so what we might do is add a transparent background to our game over screen so let's just go up here and add a image element and if we just resize this to fill the screen currently it's rendering on top of everything else and we can just change that by moving it up in the hierarchy and then let's make this entirely black and just tone down the opacity a little bit so if we play now we can still see the falling blocks but it's not as distracting let's also put all of these elements under a single object that we can easily enable and disable them so let's just create a empty child of the canvas and call this our game over screen and we can just grab all of these and parent them to the game over screen object we're going to need to create a game over script and that script is going to have three tasks first of all when the player dies it's going to enable the little game over screen that we created and secondly it's going to set the second survived to the correct value finally it's going to see if the space bar is pressed down and if it is then it's going to reload the scene so that the game can be played once again so let's head over to our scripts folder and let's create a new cop script i'm going to call this game over all right and let's just create a little empty game object somewhere now in call this the game over manager and add the game over script to that if we just open this up in order to achieve the first task we're going to need a reference to our game over screen object so let's just create a little public game object call this game over screen all right and then we're going to need to know when the game is over so let's create a method called on game over and when that method is called we'll simply say game over screen do set active true so that will enable the object then to set the number of seconds of to the correct value we're going to need to get a reference to that text object and in order to get access to the ui text we're going to have to use the namespace unityengine.ui this will allow us to create a public text variable can call this our seconds survived ui and then on game over we'll say second survive dui do text and we'll just want to set that to the amount of time that is passed so time. time now this needs to be set to a string and time. time is of course a float value so in order to convert it to a string we can just say dot two string all right now if we save and go into unity we'll see these two slots have appeared over here so let's just go and drag the game over screen onto our game over screen field and the second survive text into our second survive gui let's also then make the game over screen be disabled by default all right then to achieve the third task let's have a buol to say whether or not the game is currently over so when the oname over method is called we'll say game over is now true and then in the update method we can say if the game is over then we're going to be watching out for the space key to be pressed down and if that's pressed down we're going to want to reload the scene now in order to reload the scene we're going to need access to the scene manager so once again we need to add a new name space up here using unity engine do scene management this allows us to say scene manager dot load scene and we can load it either with its name or with its index so we'll just want to load the first scene so with an index of zero so let's save that and in order to be able to load the scene we're going to need to go up to file build settings and here we've got the scenes active in our build and we can just go into our scenes folder and drag the current scene there and you can see it's got index z so that's the one that will be loaded now this is all going to work fantastically but currently the oname over method isn't called from anywhere now the easiest way to resolve this would be to simply make the method public and then head over to the player script and just before we destroy the player object we could do a little find object of type search for an object of type game over and just call the oname over method on that now this would work we can go into unity press play and if we get ourselves destroyed by a block then the game over screen appears but as i spoke about in episode 12 on script communication this isn't a very good practice because the player script doesn't really have any relationship to the game over script so it's strange having a reference to it over here the solution i proposed osed in episode 12 is to use an event so if you remember how to do this we can just come up here create a public event system. action and we can call this something like on player death and then before we destroy the game object we can say if the on player death event is not null then we're going to invoke it by saying on death followed by a pair of parentheses just like a regular method call now over in the game over class the oname over method no longer needs to be public and in the start method we're going to want to get a reference to the player controller so we can say find object of type player controller and we'll say on player death plus equals on game over if you don't remember this not ation i recommend you have another look at episode 12 but this is simply subscribing the oname over method to the on player death event so if we now save head back to unity you can see that this will work very nicely i would just like to round the number of seconds survive to the nearest integer so let's head over to the game over method and just use mathf dot round to int on time. time and then convert that to a string there is one more problem if i just survive for a little bit and now get myself killed that was 6 seconds if i play again and just die immediately you can see it's 9 seconds so it's clear that time do time is not resetting when we reload the scene so instead what we want to use is time do time since level load and for the same reason we'll want to go onto the difficulty class and we'll want to use time do time since level load here as well so that the difficulty actually resets instead of continuing where it was when you play again so with that this little project is actually complete i'm going to quickly ramp up the difficulty though cuz it's a little bit boring in the opening stages so maybe make the maximum spawn time about 6 and then if we go onto the falling block prefab can make the minimum speed maybe 10.5 and the maximum speed 13.5 all right let's quickly work on exporting our game so if we go up to file build settings you can see that it's currently set to a mac standalone build which is exactly what i want let's go to player settings for some more options now one thing we need to be aware of is that since we're exporting at this funny aspect ratio 3x5 we're not going to be able to allow the game to be played in full screen without doing some more advanced stuff which i don't want to get into at the moment so let's just disable the full screen switch and let's also disable both the is native resolution and the default is full screen so now we can enter our own default screen width and height so we'll make that comply with the aspect ratio something like 600 by 1,000 perhaps so if we just build this now we'll see that it pops up with this it's called the resolution dialogue box and our resolution isn't anywhere there so if we press play now it's not not going to be playing in the correct resolution so if we delete that let's go back to the player settings and let's just make sure that the resolution dialogue is disabled and let's just change our product name over here i'll call mine falling blocks and then we can build and when that's done should open this up and you can see it's in the correct resolution and we can play our game so didn't survive very long there let me have one more go with it the difficulty seems fairly good to start off with just need to remember to use the screen wrap thing to my advantage all right i won't bore you with endless hours of me playing but this seems to be working very nicely so i hope you enjoyed and until next time cheers