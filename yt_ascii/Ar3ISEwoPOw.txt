this morning i became privy to this little little thing right here bun the slightly meming company it's like they can't they can never tell if they're meing or they're mean or they are just making informative tweets you never really know when it comes to bun but they made a particular tweet this morning that i thought was quite interesting right here introducing bun shell a crossplatform shell language and interpreter for shell scripting with yavas script which i was thinking that's exactly what the world needs you know that meme where it's the teacup that's pouring and it's like there's five spouts now there should be like a six spout like shell scripting now we have six so first off i will say that this looks i assume this is some sort of bash sl bash derivative i'm very curious what subset because when it when they say a crossplatform shell language that means that they have developed their own and this isn't just simply a pass through to the underlying shell right which i would totally get if it was just like hey execute commands yep like this like that actually would be pretty cool but having your own shell language on the other hand it's interesting so i wonder i'm curious what subset of and what shell is it zish is it bash is it fish like what what are we talking here i was also thinking about this cuz the interesting bit is that it's crossplatform like cuz you know people are already right javascript and just calling like exec or something you know like yeah they're just passing a string in anyways and then it just doesn't work whenever someone uses it on not their system right so it's like okay that's actually like it it is it is actually really cool that it works and that it's i mean at least hypothetically crossplatform i guess i don't know maybe in their blog post it has more info about it but yes it seems like they wrote their entire shell the other interesting thing is is it actually written in zig are you actually just secretly running zig for these do you think zig is f curious here let's see if we can find any things okay so why existing shells don't work in javascript shells like bash or have been around for decades shells are a solved problem hacker news commenter probably this is actually really good it could also be replaced with reddit or twitter but they don't work well in javascript why mac os zish linux bash and windows some stupid stuff all have slightly different shells with different syntaxes and different commands the commands available on each platform are different and even the same command have different flags and different behaviors yeah especially when it comes to like a like i wonder how they're doing like a commands right cuz you can't really normalize a core udle across platforms or maybe they can you think so you because because it's gawk on mac right and well that's thing maybe they wrote they just wrote like a custom implementation of a don't no tj tj we can't why you do like so okay so obviously they do a custom rm mrf it doesn't work right here blah blah rim raft does this environments like variables like foo bar doesn't work with windows which and where doesn't work on windows i'm kind of noticing a theme here shells also take too long to start how long does it take to spawn a shell i don't know okay m little bit of time if your intent is to run a single command starting the shell can take longer than running the command itself if you're running many commands in a loop that gets expensive quickly fair i mean that's fair when you're running thousands of commands that adds up to seconds extra in your program which i'm doing actually right now in one of my programs you could you could try embedding a shell but that's really complicated and their license may not be compatible with your project also fair also fair right there great point so i'm curious let's see is there anything any mentionings of oh you can pipe to standard out okay so it has it has all these features interesting okay i'm just curious if they if they have like some sort of spec on like what the language is likely to be because you know you only get some basics right here right i like that you're doing this this is super cool like you can do piping and all that but you know one thing that i never remember how to do is exactly how to do a conditional statement in bash there's like you know there's the single one there's the double one you know they have between them yeah spes those spaces the command is literally two left brackets you know what i mean and so if you put the text next to the two left brackets it's no longer that command anymore it doesn't run so then it just does something else yeah yeah there's there's some things there so you know i'm just curious what you know what what the exact syntax is so like to you know know a little bit more about that but okay but back to the actual thing itself what do you think about this itself like barring any of the potential ambiguities of a and all that stuff so i guess in the situation you're using bun you're like already running javascript on a server right i think it's also i think it's actually probably largely making a play in the tools market like build tools and things like that what you're saying right yeah yeah right like you're you could be on your your computer running or like on your build machine or something yeah right okay yep that's fair that's fair it does feel like so this is this is a problem in the sense that like these are common things that happen you want to run some simple command it works on your computer and then someone on your team has a different version of mac os or like they're using arch and they don't have the right packages or they're on ncks and they don't believe in like changing their system i don't know right so it's like okay it would be nice if your javascript could like do some things with this without having to download like different packages and having to remember that like rm rf doesn't work on windows yeah or something especially if you're running complicated like build stuff right because like people are doing crazy things at build time right now right yep also this like little slash you know like often you have to do like a path. separator to get the correct separator and you have to have the right stuff for everything yes that's also like i think it is nice when we can build things that are become sort of like a default way of doing something and it works on multiple different os's right like i that seems all other things being equal i don't know if this is the way that i like accomplishing that like oh we're just going to write more javascript but you're already going to be writing javascript so then i i guess like it's good it'll work on my linux computer now instead of only the mac computer that the that the javascripts have you know like yeah my worry here is that we're going to run into a just potentially a forever amount of right once debug everywhere because these subtle changes and the subtle differences are going to get extremely hard because i cannot imagine that they actually overwrite a you know what i mean like i can't imagine they actually overwrite like gzip they didn't make a custom gzip implementation they didn't i don't think so yeah so i i'm just i i have this like heavy doubt that we're going to get anything but you still have all the cross platform headaches they're unique and also second off this middle one actually really is confusing to me right here just because await is over here so what are we awaiting are we awaiting the array buffer like this this whole syntax example is actually likely invalid but nonetheless that's just a javascript ism for you because it's not like rust which do not yeah you can't do this so you can't go await a promise dot the dot will apply to the thing that is before the promise so my guess is that what comes back you must be able to do dot array buffer which is also a promise it must be a promise with addition properties on it i don't know but either way this is this is confusing question yeah oh so they just they just didn't include the parentheses in this one is what you're saying yeah gotcha yeah that is a little bit confusing that would be nice if it it didn't have that maybe bun just was like we'll parse it the right way just that would be terrible that would actually be the worst possible answer to all things because that no but real talk like the things that i do like is that i already have to do this sometimes and the biggest problem about shell script is i have i basically any shell script i have a rule which is the moment you get to arrays you've gone too far and it's time for you to choose a different language now i don't care what that lang now it's javascript now it's just javascript now effectively you can write shell in javascript to avoid having to run into the array problem but i would argue the next logical problem which is the bun problem when i write a shell script if i write it with pretty simple bash i can pretty much hand it to anyone on unix system and it most works like i don't have to have a lot of lot of differences now when i hand the script out i have to be like hey can you can you install bun the bun version that i have could you install bun yeah yeah you got to have bun yeah yeah you need bun right and so it's like i always find that to be a very interesting problem with bun is that bun is trying to be this very convenient platform but they have this huge upwind battle where even trash just talked about this literally last week with me which is that he wrote this nice like this this whole thing handed it to his teammate and his teammate's like how do i run this he's like oh yeah you're supposed to use bun he's like what he's like yeah bun he's like i don't know what that what is that like right there's like a bunch of non-terminally online people that have no idea what bun even is yes yeah and then you're in this whole like discussion about alternative javascript platforms and people like what the hell are you even talking about and half the people are like what do you mean don't i just type like javascript my file. js don't even you know what i mean they don't that they're running node yeah they're just yeah they're they're actually in the department of i have no idea what's happening so there's like a bunch of things that i think are very interesting about this yeah the thing that's kind of confusing for me about it is like you already have javascript right so it's like i wouldn't be composing commands that require weird things like i would already be using a library that does os or like fs or like other things right like i would find it weird to write the second command the like rm-rf no matter where i was in javascript the gzip one is like a is gzip is superware because there's zb like zb is a node standard it is already something that that works feels strange to write your like gzip this way but those don't handle so the two or the two cases that they mentioned in the article i don't remember what the first one was but the second one was that running shells can take a long time so i guess that would be like if you're going to exec something yes right like the only way you could do the one where you're doing this like fun fu. js right the third example you do actually have to like start exact like some other exact thing and then that part does feel kind of weird i mean you can set environment variables i'm sure there's like some platform independent api so that part is the part that's kind of weird right because like i already have javascript i can just like install the node modules and stuff that i would need to do crossplatform api things yeah i'm pretty sure there's rules around environment variables and how they do it in fact i even thought there was like a api for actually just doing that i thought there was one to just say hey here's the api for it maybe i'm completely wrong on it yeah i thought there was like n or and then you can just set set it as one of the one of the things oh there you go yeah yeah yeah there it is right there so i would assume that exec is already a platform independent way to set these kind of variables as it is so each of the examples i can see how like their their version looks a lot easier right like i i get that i'm with them and for like writing a quick and dirty script it seems better but i am still sort of struggling to sort of get why i would want to like have this as such a big feature because if i'm going to ship it as something important as part of anything i'm making i would probably un quick and dirty script it into like crossplatform apis that work well and just compose like normal javascript functions instead of this i would agree and it's also not like like you were saying not everybody has bun right now it'd be different if it was like make and' be like okay well everyone has make installed or something you're like okay then maybe i learned how to use make but not everyone has bun installed so i don't know that's i'm i am very conflicted i was really hoping when i saw the teaser for the dollar sign that we were going to get like a bun crypto coin that so we could just start importing dollars like for ourselves but that didn't turn out so i'm i'm still sort of like reeling from that whole situation yeah no you're shook i can tell when i started this phone call you seemed a little out of sorts cuz i was thinking like okay vc monetization what's the obvious next step well you can just like do the web 3 and you just get to import web 3 right at the top that would have been sweet bun coin that's to the moon you know yeah i know that is it's it's actually already on the moon to begin with yeah mooning you know so it's like it works it's there we can connect the dots here i'm sort of struggling to figure out where i would use this i don't know what do you think where would you use this if you like let's say your team was using bun already where would you use this so my general problem is is that i only see this useful for dirty scripts but the reality is is all dirty scripts that that i make like hey i really need to run this process 10 times and just like make it work often i i literally this is like this is what i do let's just say i have something called run run right i jump in here i do the whole user bin and bash do that hit it with hit it with what's it called a e to get it so it's nice and colored hit it with a space x so look at that chamod chamow i chamow it really quickly right there so we're good to go and then like co-pilot a helps me a lot because i like really bad at this and so when i run something like this i can go like that and i can go like this pid equals and then it's like oh yeah it's that one and like i can do all the things i need to do really quickly in a bash script to like do the dirty work y with co-pilot because i'm not the best at bash and i'm not play like one of my goals is to be inherently bad at bash because of you don't get sucked down the temptation i don't get sucked down the temptation and keep on just iterating a just just a little bit more just a little bit more right and so like right here this is clearly a place where you're going to accidentally tempt yourself and i think you'll be able to go so much further which i almost think that in the end it's just going to produce a more wacky system to try to reason about right that's kind of my concern because like how are you going to know that now you depend on like gzip yeah yeah there is there's no standard installation you're not installing zb or expecting zb as part of your build which bun probably ships zb and node already comes with zib so like there it's already a thing yeah for the common ones it's fine but it's like as soon as you just end up using one that someone like has to install with like ap or something right then but then still just kind of like i don't know it just seems i mean obviously i like it because it's cool and it's sweet engineering so that part but i'm trying to not like just be like well i like it cuz it's cool engineering i'm on your team for that one i'm actually struggling because of that specific one cu i'm like yeah look at that i'm like oh i would use this but really what i should be saying is like oh i would abuse this yes like so so i don't know i think it's really cool to be able to just like super easily a away to command and get the output and then do a few things with it i like that i like that you know it's going to handle like escaping things and all this other stuff right it just still you know still makes me a little bit nervous cuz every time i see shell scripts and commands accumulate i always regret that situation in six months yep i've never written a script that was more extensive than something small that i did not regret like universally so that part's that part's kind of that's what i'm trying to figure out i'd be interested to see do you have any tweets from like jared or anything that we could pull up or like look at his to see what he has to say about it to' be interested to see what like jared's thought process is it did did you see trav can i run bun from a bun shell yes the answer is yes it's right there it's the third command classic read dude a trav didn't even read what a loser but okay so one last followup that i that i also worry about is that bun is supposed to be crossplatform and the more goodies you store in a bun way the less you'll have one way cross platforming if you know what i mean like or cross environmen thing meaning that you can run your node script in bun but now there's this like ever growing set of we'll call them conveniences which i don't buy that make it so that no bun script can be run with node and then second off another thing that i see is that when something's easy to use it will be used yes agree and that is an inherently bad decision most the time like you should not read a file likely this way right you should like someone's going to cat file in here you should not do that you should use an api to read a file because it's going to be significantly more efficient just like literally orders of magnitude more efficient and like i can see why this is like appealing to people who really like javascript and think like every everything in the stack like even javascript in my my sql database right like i can see why then you would like this like well why not javascript in my shell but yep it just it just makes me nervous that's all you know just makes me nervous it's pretty exciting i don't see anything here necessarily by jared well i was wondering if he has any like quot like i would just go to can we go to jared's profile really quick and just check this kind of funny this guy just said rip on this one must have been working on this thing to be able to do oh yeah oh oh no it's the same oh it's the same it is the same the same i mean who knows if it does if it does like you know the exact same ones the main thing i'm still wondering okay we didn't miss it right that they like said how they implemented it or like how they make rm work the same on all the different they didn't they didn't have any they didn't have any languages that were cross they didn't have any their little i look i kind of sp i sped reddit you know which i'm not the best at reading but i i didn't but like why existing so you know it's not in there right environment variables not in there no no no wonder how how did they make rm like do that you know what i mean they must have to parse it and then they have the hard part is they they they have to they had to build a mostly compatible bash parser the problem is like that's why my very first question was to what level of bash do they support that's why i was asking like did they just make their own a because like that's not on windows right yeah these are all my questions hold on let's go like this bun update is it bun update let's see bun bun what called bun bun what is it it it was import dollar from bun are you in a project right now you might want to go somewhere else all right i am in a project just just let it happen all right that's fine that's fine to let's see move bun bun to bun js or i should have done ts there we go what was i going to do there's going to be in here so my one of my big questions is this which is i can go to something like oh nice you get no auto complete so that kind of sucks right oh gosh but what about something like this can i you know m mhm can like can you do crazy things like this right can i co-pilot's suggestions so far dude co-pilot's completely screwed up on that one well it's like why are you writing php inside of here you know what i mean like yeah see i don't even know what this means i thought i thought i i thought i had you need to await it though probably well maybe but that's not that's not what the problem is right maybe it's not is it released yet did you bun update or bun upgrade i don't know which one is which bun upgrade i don't think bun upgrade exists yeah okay i bun update which you're right i bun update and upgrade very very different very different nice all right f okay so it does work that so you can subshell like i'm curious if they have all the rules of sub shelling correctly they can't see any very much of the shell by the way cuz you're i know but but they see the command plus what went out right it's just like to what extent are they sub shelling like if i cd here here dang it now now i'm just so dang curious let's hit it let's hit it cuz right now i'm just curious about this one where it's like cd back back right and present working directory present working directory right let's see i guess what do i have to do more of these just just thrown in all sorts of things at this point oh this looks good this looks good thank you thank you i know but you know for a fact someone's going to write this cd back back didn't seem like it worked at all oh cd is just broken well i mean i got the same path for both of them that is weird yeah so if i went oh my goodness here i'm going to start using i got to start using dollar sign so there we go right that should do something right yes yep yep yep yep i would think so i only got two i'm not even sure what just happened there to tell you the honest truth nice i i don't i honestly don't even know what just happened there here well this just shows why we shouldn't be doing that i know there you go look see this one at least i at least i get i i get something different there but do you need to surround the whole thing with no you shouldn't have to surround i i have escape tick i have escape yeah dang it wait shoot dude now dude now i have no idea what i'm doing in before i delete oh crap i i' i'm already all the way back i'm already all the way back anyways this is why you shouldn't do this okay this is why we shouldn't do this all right but then i had it as a subshell right which should be different oh gosh i don't even i honestly don't even know what i i'm getting in here oh my goodness h anyways forget it i'm i'm terrible at this i'm not even doing it this is why i don't do bash and point proven you should use a l that was all a trick chat to make you believe that bash isn't worth writing you've been played you've been played well either way no matter what this was very interesting cuz i did cd back back and that did not seem to do what i would expect it to do right one thing that would be interesting is like okay so let's say you do await cd dot dot right like is is every dollar sign run in a separate shell or they run in one shell that goes one after another you know what i'm saying so you do like p pwd and then you know what do you understand what i'm yeah yeah yeah yeah like that yeah and then like again just i'm interested to know what you know what's in between all of them yeah nothing so like which which makes like i guess either way could hypothetically like make sense you know what i mean right oh that one worked there you go so it's like it's like it's so i must have done something wrong previously so it looks like yeah each one is like its own shell though right each dollar sign is its own shell like execution yeah it's like it's but it must be some sort of like in memory yeah they're doing some trick shell emulating that's that's tiny which is crazy like does it does it also source your like bash r you know what i'm saying does it also like source the bash rc like is it in the same environment does it source any other additional you know what i'm saying yeah can can can you execute vim it's child process under the hood okay oh yeah run them oh we're in we're so in i am so in but i but i only got like part of my stuff sourced nice oh i'm in vim i'm in vim vim yeah yeah yeah oh it doesn't have it doesn't have your aliases it doesn't have my aliases but i'm in vim i'm inm in bun oh that's kind of weird because then like i mean once again it's not that it's necessarily weird it's more like it's it's not inherently clear which one it would be because if i think of running the like dollar sign stuff as the same as running like a command on my command line it's just not true yes right that's just wrong that's like a bad that's a bad frame of reference to have for it correct it's it's just it's some other thing it's some clean environment determined by bun with some level like i bet you that the environment variables you probably pass into bun my guess are passed through right yep which in a sense could be dangerous right if you have a bunch of environment variables people could steal your en en variables and you could have sensitive information in environment variables yeah i mean it's sort of like that's sort of probably already an attack vector the only thing that would be kind of oh yeah it is o you know what though that's new about this is like of course all the places are all the security things already are checking for exact you know what i mean but they're not going to be checking for this there will be a bit of security leaks for a little bit and it's and it's hard to check for this one yeah i yeah it's very the whole thing is i still think think it's so cool i'm like i maybe i should just start running in bun you know what i i know i mean at the end of the day the engineering to this is super cool and i think it's really cool because this this does make at the very least like whether it's going to generate other problems i do think it will probably mitigate a decent share of crossplatform like build kind of things within the javascript like within the bun ecosystem right yes where you're doing a bunch of these things particularly like bun has like some build steps and some other things i'm not a h i'm not really like a bun expert right but like it has all this other sort of stuff that's going on and so it's you'll probably be running these kinds of commands more often right in bun like in some script that's part of your build pipeline yes and then that way you could avoid a whole crossplatform issue your deleting of temporary files your creation of temporary files all that kind of stuff you effectively get a unified bash-like language that is mostly transportable from your already pretty nent and terrible bash understanding so that part i could see as being like a viable use case assuming you're already sort of like bought into bun and you're trying to do those things right that's going to fix some of those things where someone installs it on windows and now it just like doesn't work right like oh well now instead of using exec we use dollar sign and it fixes the fact that like the slashes are wrong sometimes or that powershell randomly takes two minutes to start every once in a while you know like all these kind of things that like you get issues for on projects that have anything to do with the system i like it i like it all right well hey this was cool thanks tok for joining me no problem i was i i was thinking about this for quite a bit and i was trying to figure out what my thoughts were and i'm still i'm still still working on it you know still working well i appreciate that thanks for joining me cool project though i i mean i'm happy about it all right yeah the name is tj where can we find you the shellen