making sense of senseless javascript features all right i'm pretty excited about this why does javascript have so many eccentricities like why does this that's floating point specification dog or why does this equal false evaluate to true that that yo dog i feel like those aren't very okay granted this is a bit wild i'll give it to you but this this is just i e dog i e 754-1985 floating point specification how do you not know about that it's it's it's it's 7549 85 right yeah just if you don't if you don't know just know that know about your mantisa everybody knows that anyways there are a lot of mindboggling decisions in javascript that seem pointless some are misunderstood while other hilarious while others are direct missteps in the design regardless it's worth knowing what these strange things are and why they are in the language i'll share what i believe are some quirkiest things about javascript and make sense them floating point format blah blah blah blah i e specification it's in all languages you can do it in anything it's fantastic many of has mocked javascript for writing 0.1 plus point2 in the console and watching it resoundingly failed to get3 but this funny looking value what many developers might not know is this weird result is not really javascript's fault javascript is merely adhering to i e standard for floating point arithmetic that nearly every other computer and programming language uses to represent numbers but what exactly is a floating point arithmetic well computers have to represent numbers in all sizes from the distance between planets and even between atoms do you know that the distance the distance relatively between atoms is greater than the distance between planets is that weird is that kind of like hard to think about that you are more empty space than space space is empty yeah you're even emptier it's just weird anyways we're going to we're going to move on we don't need to know about floating decimals we know all about this look mantisa look mantisa said we're going to just move on this is an old ass problem blah blah blah blah blah blah we've already done it okay type coercion let's go on i want to see some javascript problems here javascript is dynamically typed language meaning that we don't have to declare a variable's type and it can be changed later in code the issue comes with being weakly typed since there are many occasions where the language will try try to implicitly convert between types eg from strings to numbers or falsy to truthy values this is specifically true when using the equality operator and the plus sign operators yes the rules for type coercion are intricate hard to remember and even incorrect in certain situations did you know you want to see something fun you can do with javascript you can only do this if you're really prepared okay are you ready for this one so i'm going to go like this const a equals string one you're not you don't know where this is going okay let b equals 1 are you ready for this one b++ plus plus a dang it you have to put a space in there dang it it's ambiguous i knew you had to put a space in there but look at all that look at how cool that looks look at that there go look at this look at this go how great is that thing how fun is that isn't that fun you can do that if you just do enough pluses that's not a good thing you're literally [ __ ] for example javascript will cse a string to a number when compared with another number yeah yeah yep true that's because you did this one so it ups the coercion it should convert the two into a string the inverse applies to the plus sign operator and it'll try to coers the number into a string when possible yep there we go beautiful that's why we should only use plus sign operators if we are sure that the values are numbers this is actually really funny that he should say that because you may not realize this but there's this really funny issue here i'm just going to take it from this thing is number i'm just going to yank this one right here but did you know that if you were to try to determine if something was a number and you needed to use say underscores library is number nan which is not a number is a number so just remember that so you'd have to check is number not and not is not a number your number so you got to and those two things together it's so good it's so good it's beautiful that's why we should use a plus sign operator if we are sure that we're using numbers while concatenating strings it is better to use concat method or a template literal interesting okay i didn't realize there was a concat method on strings okay i i just i didn't realize that was a thing was that is that a real thing oh i didn't know that interesting i i didn't know that look at that that's cool spread is greater than cat i don't think you know what you're talking [music] about [ __ ] my c dang it my camera dang it i was vastly underprepared with the amount of battery that i had left on my camera okay so the problem with my camera is that it requires battery okay because the the the main sour of power isn't enough to make it power by itself so i had to have like 10 minutes of battery will last for like an hour when plugged in let's keep on going the reason such coercion are in the language is actually absurd when javascript's creator brandan iike was asked what he would have done differently in javascript's design his answer was to be more meticulous in the implementation early users of the language wanted i would have avoided some of the compromises that i made when i first got early adopters and they said can you change this brendan ike that's actually so that's the exact same reason why i'm rewriting harpoon is literally that exact same thing the easiest way to screw up any project is to let people who are early adopters help shape the vision you have keep the vision narrow honestly keep the vision narrow the most glaring example is the reason why we have two equality operators double equals and triple equals well i mean the nice part about that is that if you really really really really want to you can do something like this const c equals -4 and then because we're using triple equals we get a statistically longer equality check can your language do that can your language do that can you do that no you can't in your language okay your language not very strong and it's a quality checking when an earlier javascript user prompted his needs to compare a number to a string without having to change his code to make conversion brendan added a loose a quality operator to satisfy those needs yeah that's a mistake but we look back at it's very easy to be armchair quarterback imagine he also made the language in 8 days because he was or seven days because he was absolutely required lura says 10 or seven depending on who you listen to there are a lot of other rules governing the loose equality operator in other statements checking for a condition that make javascript developers scratch their heads there are complex tedious and senseless so we should avoid the loose equality operator at all costs you know what i really really really hate the fact that null equals undefined and you see that every now and then have you ever had a variable that needs to be either null or undefined and you know you see code where someone does something like that and it just is there it's always there and i'm always tempted to use it i can't even help it i want to use it it's like the one i want to use always so why do we have two equality operators in the first place well a lot of factors but we can point a finger at guy l steel co-creator of the scheme programming language he assured ike that we could always add another equality operator since there were dialects with five distinct equality operators in the lisp language this mentality is dangerous and nowadays all features have to be rigorously analyzed because we can always add new features but once they are in the language they cannot be removed one thing i actually really appreciate about o camel every single type has its own operator and now you're probably thinking that's super inconvenient and takes a while to understand so plus is for integers plus period is for floating points i forget what string concatenation is maybe it's that or it's that i can't i think it's the ad sign maybe i can't remember what it all is but it allows it to be able to make an amazing inference because if you use any specific syntax it's able to immediately go okay this must be of that type it's super cool okay is it's the exponent sign the carrot it's super cool i actually really like that about the language it takes a little bit of more learning in the beginning but you get this incredible way to be able to understand every single type by the syntax use which allows you to write significantly less types while maintaining full typed language it's pretty cool oh camel my camel when writing code in javascript a semicolon is required at the end of some statements including varlet const expression statements do while continue break return throw debugger is is it required after a return is that true i don't think it's required i think they have automatic semicolon insertion isn't that what happens i don't think it's required i don't think it's required and i don't think it's required after debugger either class field declarations public or private i don't know if that's true either i'm actually confused about that that said we don't necessarily have to insert a semicolon every time since javascript can automatically insert semicolons in a process unsurprisingly known as automatic semic col insertion this is actually crazy by the way i i wonder if this slows down the actual system i'm curious about that it was intended to make coding easier for beginners who didn't know where a semicolon was needed that is crazy this is the craziest statement i think i've ever read in my entire lifetime but it isn't a reliable feature and we should stick to explicitly typing where a semicolon goes linters and formatters add a semicolon where asi would but they aren't completely reliable either asi can make some code work but most of the time it doesn't take the following you can probably see where the semicolons go but if we formatted it correctly it would end up like this yeah but if we feed the prior code directly to javascript all kind of exceptions would happen is this true i kind of want to i don't even is that really true is that true in today's world one is not a function oh yeah interesting okay yeah weird and that's because vim test and that's because we don't have a semicolon right here there we go okay yeah so you it is required after let statements okay cu or con statements okay i i don't you know i don't know all the all the rules but interesting in conclusion know your semicolons i just add them always you know what i'm kind of like a semicolon andy if you need semicolons why so many bottom values what is the what the term bottom is often used to represent a value that does not exist or is undefined i don't think he knows what bottom means i'm just going to say that and we're going to move on but why do we have two kinds of bottom values in javascript regular bottoms and power bottoms what are they everything in javascript can be considered an object except the two bottom values null and undefined despite type of null returning object attempting to get a property value from them raises an exception note that strictly speaking all primitive values aren't objects but only null and undefined aren't subjected to boxing we can think of nan as a third bottom value that represents the absence of a number well funny you should say that the abundance of bottom values should be regarded as a design error there isn't a straightforward reason that explains the existence of two bottom values but we can see differences in how javascript employs them undefined is the bottom value of javascript uses by default so it's considered good practice to use it exclusively in your code when we define a variable without a initial value attempting to retrieve it assigns the undefined value fair null makes it so sad null is so sad null null is so sad it's used by javascript to denote the end of a recursive data structure more specifically used in the prototype chain to denote its end most of the time you can use undefined over null but there are some occasions where only null can be used as in the case with object create which can only create an object without a prototype passing null using undefined returns a type eror i love javascript null and undefined both suffer from path problem when trying to access properties from the bottom value as if they were objects exceptions are raised okay yep fair fair fair you can't do a type error yep there is no way around this unless we check for each property value before trying yep that's why we have this little nollie operator nolly operators are fantastic these are for losers loser operation way cooler i said nan can be considered a bottom value but it has its own confusing place in javascript since it represents numbers that aren't actual numbers this is just again i e floating point specification usually done to a failed string to number conversion which is also another reason to avoid it nan has its own shenanigans because it isn't equal to itself to test if a value is nan or not use number is nan classic you can also just use is nan it's also a global function we can check for all three bottom values with the following test nice javascript i love it i'm still going to write my own primage programming language yeah you should i know nan i me but nan but nan is in other languages too you know n nan's a real thing increment and decrement okay as developers we tend to spend more time reading code rather than writing it i spend more time writing it whether we are reading documentation reviewing someone else's work or checking our own code code readability will increase our productivity over brevity in other words reliability saves time in the long run i you know i've never really understood this argument i spend more time writing code argument tends to also run along the same veins as you don't need to learn how to type fast to be proficient at your job i just probably argue the opposite at this point that's why i prefer using plus one or minus one rather than increment and decrement operators i've never liked this argument ever i think it's a worthless argument i just don't think there is a huge any direction on this i i mean the only argument i've heard people make is with rust and expressions versus statements you know what i mean fine it's a language limitation i get that but this argument i've just always found to be weak you know i just find it's just like a weak argument if for whatever reason what's it called let a equals 1 if a+ plus is confusing but a plus equals 1 isn't i don't know i don't know i can't tell you i can't tell you why that happens okay that's your fault doesn't javascript also have that technically yes we already went over it it technically does have that this is a full think no no it also has that it also has the triple plus sign which of course is going to be like let b equals 1 you can do aa you can do that the real question is what happened here is that a plus pre-increment b or is that a post increment plus b i can tell you which answer it is but i'm curious if you guys know it'd be preb or post a pre-increment b it's post a how can you tell it's post a a is three b is 1 the answer is four it's post a so it's going to be a++ so a is now currently four b was 1 1+ 3 is four right so it's not preb a is four sucks to suck really overall it isn't a life or death situation but a nice way to make your code more readable yeah so it's a++ plus b conclusion javascript seemingly senseless features often arise from from historical decisions compromises and attempted to cater to all needs unfortunately it's impossible to make everybody happy i'm a little sad that this article didn't go into some more of the weirdnesses of javascript like i think i showed more just oddities in general when it comes to these things like another really annoying thing is the difference between parse int and number they they both will cast something so if we have five number will cast that oopsies to a number parcent we'll cast it to a number you know what i mean they'll both do that but that will make it a this will make it a zero it's kind of annoying right it's kind of just like super annoying right there's like all these weirdnesses that just exist constantly in javascript and unless if you know them all you just run into them all the time so like a really simple one to know about is like if we go like this test file right i'll just call it test and i go like this 1 2 3 4 there we go sometimes i forget the reasons why this happens so i might not be able to do this offand fs fs. read file sync and then we'll like like this test two two string split new line map x plus x convert them all into numbers look what i got yeah kind of funny huh but i only have four lines in this file well there's like a new line at the end and that new line when you split results in an empty string so if i just like this you get that there's this little last empty string and the empty string gets turned into a zero i know it's like these little things that happen that are super effing annoying now av elry i actually did do one live two months ago and yesterday someone challenged me that i couldn't do merge sort or what's it called bubble sort we did bubble swort live baby yo mama it's really annoying well the hard part is this is is this right here what do you do with that right what do you what what do you do with that one who's right what happened if you got that now you got two of them you can do parsent this is true you have to do a pars min and then an is you'd have to do you'd have to do yourself a little you can do yourself a little map parse int but this doesn't do it either for those you know what happens here this is going to be a wild result are you ready for the wild result yeah that's weird okay so let's do number that's also different gigity giggity people in other words javascript is difficult and the small tiny little bits of javascript make you a tional how about this one this is one of my this is always one of my favorite ones right you have like a right and if i console log a whoopsies aa i actually get this and then sometimes people forget and then they do something with a template string and then look you get object object i just love that i just love this one because you screw up and you don't realize you've misone it and then you have this log some point later in your life in which becomes object object it's always super annoying and that's because this one expands differently than the other one you just wouldn't know that right you just wouldn't know that it it makes perfect sense you just simply wouldn't know that it make it makes perfect sense trust me it's just difficult and i think there's also i swear there's another one with parse int and something with i swear there was one with this that's like hilarious oh yeah here we go yeah there it is that's such a [ __ ] is just such an fu don't you just don't you just don't you just hate that you want to know why this happens all right let me tell you why this one happens are you ready for this one okay so this one's pretty funny too so let's whenever you pass something to parsent it actually enforces it to become a string so what is the string representation of this well it's that what's the string representation of that well as you can see it keeps doing this but watch this at some point wait where's the where is it it's supposed to convert it into what's it called it's i thought at some point okay i know why it does this it converts it into scientific notation eventually you get 5e something oh i i had quotes you're right you're right you're right my bad i'm stupid there you go my bad i had quotes there you go it con it converts it into 5e so how does parse in work well parse int is its kind of funny thing if i go foo five it's not a number but if i go five fu it parses out the first number therefore when you happen to parse out an int that gets converted into a scientific number it then becomes five it makes perfect sense if you accept all of the previous statements that they make sense i feel like at this point you're ready to learn about monads number you get scientific notation and that's why you get paid the lord's language scientific notation called it i i'm sure there's other ones that we can think of that are just super effed up but i can't think of them off the top of my head i mean there's like the funny ones that you know like reverse and sort when it comes to an array like those ones are really really funny just in general for those that don't know any of those ones anything with an array anytime you have an array and a function that returns an array you make an assumption right you make an assumption that whatever comes back it doesn't mutate the original one well unfortunately when you do bb. reverse it actually returns you an array but when you look at bb it's also been this splice makes sense splice makes sense because splice you actually say from what index and how many elements i wish to remove and then what do i wish to insert and so it actually returns to the subsection of the array removed so you removed 2 one you remove these two items and bb now contains that i mean splice actually makes a lot of sense splice i have zero problems with splice is exactly what i would want it to work like if you wanted to be able to delete and insert at the exact same time there is no better interface than that don't worry i know all about two reverse and all that crap yeah reverse seems dumber then yeah reverse is just dumb that's all it is reverse is just dumb and it's funny the real history of javascript brendan ike was thinking about quitting so when told to create a programming language in a week he cobbled together a joke language to make fun of everybody to make fun of everything bad in programming then the higher ups and users didn't get the joke and he's been face palming ever since the end may god have mercy on our souls yes yes of course and then there's the other one the other funny one which is like things like ne4 -3 1 7 77 100 right and then you sort that and you get that that's a cool array wow that's awesome i'm happy that happened the default sort on sort takes in everything and converts it to a string so if you wish to do a number you'd have to provide an a b a minus b and then you'd get it correctly or a b minus a if you wish to have it the other direction the old classic b minus a you know what i'm talking about totally good sort of nerd get sort of nerd i just wish sort required an argument yeah it probably would be best that sort required an argument two sorted doesn't sort the array two sorted i wonder if two sorted does the same thing i would assume two sorted does the exact same thing i'd be shocked if two sorted didn't yeah two sorted does the same thing it'd be crazier to have that feature not extend all the way through plus you'd have to know if your entire array was filled with numbers or not before you sorted it because if there's one string you'd have to sort it based on string rules not on number rules so it' be like a crazy inefficient algorithm you just have to simply be consistent yeah i mean the thing is it's at least it's consistently inconsistent i think those things are more fun to talk about in javascript than like i mean semicolon is kind of weak whatever i still think like another kind of funny one is like function and if you have a function really oh function fu and you do this and then you go return and then you go five and then you close that that should it might not oh dang it yeah there we go we returned undefined like that's great like how great is that like if you have a the only time white space is significant is in the return statement which just somehow feels funny automatic semicolon insertion boys you know what i mean stop breaking js it's just funny automatic semicolon insertion it gets you what a piece of [ __ ] language yeah you just got to know about these things that's all the gauntlet has been thrown i remember you yeah yeah yeah all right hey everybody good luck with javascript i've let's see i've done a lot of amazing stuff in with js for many years prime proved me that the downsides of js are a real deal yeah i don't don't get me wrong i love javascript it's a very easy language to get things done this is just people's inability to understand bitwise math i love javascript i'm just smart enough to know that it sucks it bun fixes nothing because bun uses javascript that's it if you think dino or bun will take the dumb out of javascript you're dumber than javascript sorry it's not turning back on the name is i don't have a camera agent