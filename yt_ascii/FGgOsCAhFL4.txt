as software developers we often tend to only focus on what our code does but it's equally important to understand what our code doesn't do what is guaranteed to not change by thinking about this is going to help you understand your code better and write better test how do you do that well through a concept called an invariant but before we dive into that i have a weekly newsletter that covers all sorts of updates about software development programming concepts other exciting related topics you can join for free fe the link below now what are invariant let's start with the definition that comes from the mathematics domain an invariance is a property of a mathematical object or class of mathematical object that remains unchanged after operations or transformations of a certain type are applied to that object maybe that's a bit vague to you when you're just hearing that definition especially if you're not familiar with terms like transformations and objects and classes in mathematics but we can make our own interpretation of that definition that's more connected to the domain of software in software we can think of an invariant as a condition that remains true throughout the execution of a piece of code but are invariance than something that we actually write in code well not really it's more of an understanding that you have as developer or let's say an agreement or a contract of the code that you write there's different types of invariants but two very important ones are loop invariants which cover more the logic of your code and representation invariance which are more about the structure of your data now for that second option representation invariance there is a specific one that's called the class invariance which is a condition that holds for all instances of a class throughout its lifetime here you see an example of that we have a class chessboard that has class invariance which is that the board dimensions are always 8 by8 squares all pieces are positioned within the val b boundaries of the jess board each player has exactly one king a player can have at most one queen two bishops etc etc and then the idea is that you can write tests that check that these invariant actually hold in various scenarios here i have an example that shows loop invariance so these are conditions that remain true before and after each iteration of a loop and that's what you see here so i have a function called find max that gets a list of integers and returns the highest integer in the list and this uses a for loop to find the maximum integer value at the end of each iteration there is a loop invariant which is that max element is the largest item in the list of integers that you've traversed so far from zero to i now why is it relevant to know about these things well these invariant they act as a sort of contract they ensure that certain conditions are always met and this means if you can make assumptions it can simplify not only the development process and the debugging process but it can also help with testing you can test your code not just by checking that certain inputs result in certain outputs but you can also check that an invariant hold and specifically this is a type of testing called property based testing that you can do with packages such as hypothesis in python however if the invariant is not stated clearly then it can do more harm than good because it may mislead the developer and actually in this class invariance example there is invariant that is not fully correct can you find it if so write it in the comments below invariants are another tool for us as developers to define constraints and make our code more understandable and weirdly you could even argue that it's some type of documentation now if you want to learn other ways to document your code then watch this video next thanks for watching and see you next time