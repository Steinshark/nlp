everyone's passwords are terrible and they should change their passwords right now. let's just get that right out in the open, ok, you all have bad passwords and you know you should feel bad. probably not necessarily people who watch computerphile, but the majority of the public don't have good passwords, and it's a real problem. it's a problem because- people like linkedin and talktalk get hacked, and a bunch of hashed passwords go out onto the internet, um.. and then within ..you know, hours half of 'em have been cracked. and then people are going: "oh well this user name and this password's been cracked. well let's just go and log on over there and see if that username and password combination gets me into their amazon. oh it does? that's good news." and, and so on. password cracking has massive implications for password security. uh, for what passwords you need to use, how you need to store your passwords, and so on and so forth. in a previous video, tom scott talked about how to store passwords, tom scott: "please please please please please, look up a recent tutorial for the language you're using." as a company right? that these things are still true. right, the hashing algorithms you have to use have become longer. because they don't hold up as well, the older ones. which we'll see in a minute, and um... so, some things have changed, but really the principle remains the same. right? we don't store passwords unencrypted in a database because that's a terrible terrible idea. what we do is we pass them through something called a "one way pseudorandom function". which basically take some plain text password, and turns it into gibberish. and then, when someone tries to login, we do the same operation on what they just typed, and if the gibberish matches up we know they've taught in their password correctly, without actually having to know what their password is. but if these hashes get dumped on the
internet then we can't reverse them because they're just random nonsense but
we can do is test the load of different words by hashing them and seeing if the hatches matc--hashes match any of the ones in the dictionary and if they do we
know we've cracked their password and and that's really really easy to do i'm going to show you it and it's got me
scared me the first time so yeah let's see-- i've changed my
password simply put that way okay now this is what is necessary
terminal but this is beast the aptly named beast which is our deep learning,
one of our deep learning service right now. i'm not using a deep learning right now and
nor is anyone else i don't think, so just for a moment we'll
borrow it. it's about two or three times bigger
than a normal desktop but it's not service size rack and it's sitting
somewhere between behind a bunch of locks i think on this floor somewhere i
haven't seen it-- well i saw getting built and then i-- but it disappeared. maybe we'll go and look at it some time. so if we-- we type in there nvidia smi we can see what's what's this is
equipped with. for now, my most of my contact with it is my terminal and i ask it to do things and it does them very very fast. this particular server has four titan x graphics cards in it. a titan x is one of the foremost graphics cards. there are new generation 10 nvidia graphics
cards coming out and some amd cards but a titan x is still performing massively well. certainly for deep learning it's very good because it has 12 gigs of onboard ram. now in some games 12 gigs onboard ram might be necessary for really high texture resolution. so if i wanted to play... you know, the new doom game and there was no one about then i could. apart from they've installed ubuntu on it so that doesn't help me much. it might be fedora. let's not go into that though. so if i say it's linux, right, and we've installed caffe and other deep learning libraries and lots of people are using it all the time to do interesting deep learning problems. we've got a huge array of different problems, but right now we will use it to do some password cracking. i downloaded a program called cudahashcat. hashcat is one of the sort of foremost password cracking tools. it lets you do lots of different types of password cracking which i'll talk about and it does it very very quickly because it makes use of the graphics card or in this computer case it makes use of all four graphics cards in parallel. each of these graphics card is capable of somewhere around i think it's ten thousand million so 10 billion hashes per second. my standard graphics card at home which is pretty good is about four billion so these about nearly two times faster each and there's four of them. okay, so this is over eight times faster, let's say about 10 times faster than my computer at home? it takes 40 billion plaintext password hypotheses, hashes them using md5, and compares them to a list at a rate of 40 billion per second. [off camera] and how many words are written just in english dictionary? [mike] more than you'd think. a lot more than you'd think, which, is in some cases reassuring. in other cases if your password is not very long, not reassuring at all. okay, so we'll talk about the different-- i'll show it working and i'll talk about the different kinds of
password cracking because they do have implications, different implications for passwords. okay, so hashcat is run off the command line... what i've got here, if i just show it... this example file is just a list of hashes that comes with hashcat. there's about six or so thousand hashes in it that range in difficulty. so some of them are going to be "password1" because that's what some people's passwords are, and some of them are going to be much longer, so 20 or 30 characters, almost random, and they're
going to be very difficult to crack. so we won't crack all of them now but we will crack a fair few. so if i just show you this, these are what the hashes look like. md5 produces a hundred and twenty-eight bit hash. now only five should not be used by anyone ever, ever again. the problem is that... that lower... standard hashes like md5 and sha-1 still get used a lot for back end storage. maybe the developers are thinking, "oh, it's already in sha-1, you know, it's a lot of effort to convert them all over. maybe people won't be able to log in for a while... hmm, let's probably not." yes, do. change your hashes to something like sha-512 really quickly, because this is not acceptable. hashing it takes longer literally just-- it takes longer for the gpu to process and so you will go down from 40 billion to, you know, a few million or a few thousand for really good hashing that's been iterated a lot of times. and that makes the process insurmountably harder, you know... much more difficult, you know, and so that-- that would be what i would recommend as a developer. as a user, it just means you have to have a password that sui-- that's acceptable but you have to, in a way, assume that some of the websites that you use won't know what they're doing and will have it stored in md5. if it's still in plain text, then all bets are off, there's nothing we can do. okay, right, so let's just run this in brute force mode. so the first type of password cracking,
which sees some use but not a lot, is brute force. so this is simply a case of starting
with "aaaaaaa" and then "aaaaaab" and "aaaac" and so on for different character sets. if we assume that it's going to be some subset of passwords that use only lowercase letters we can brute force those very quickly, especially if they're not very long. so what i'm going to do first is i'm going to run a hash-- i'm going to run an attack on these passwords of, let's say, seven character passwords all with lower case letters. okay, so that's like this... so it's, ah... hashcat attack mode 3, which is brute force, example0.hash-- the hash file-- and then my mask which tells me what character sets i'm going to use. so l is a lowercase letter, so 1, 2, 3, 4, 5, 6, 7 lower case letters. thinking... there we go! so it's done it. okay, if i scroll up, those are the passwords it found. okay, not very many, because there aren't very many, luckily for these users, lowercase only passwords. [odd cut] ...seven of them. but it went through the whole combination of lower case letters at seven length, in, you know, a second? which isn't great. alright? so we step it up a notch. now we say, "well okay let's do eight characters," so we just add another l and we run it and... forty billion attempts per second... here they go and they just, they just keep coming, right. each of these lines is a hash and the associated password that has been cracked. so what it means is, at some point it's tried "mycubana," the combination of letters that spell "mycubana" it's hashed it and found, "oh that does match one of the ones in our dictionary, in our hashfile, so we will put that in our output. alright? okay, so let's just step it up a little bit further. some passwords, for example, will have two digits at the end. okay? the vast majority part of that have numbers in have one or two digits at the end, maybe four, because they're dates? so let's say we say six character passwords with two digits at the end. here we go. aw, there were only a few of those, but we found them. there they are. this is a good start, right, it's very very quick. it starts to slow down as you increase
the number of characters so when you're doing a brute force, sort of naive brute force attack like this, then you're using the number of characters in your character set to the power of the length of your password. in this case, there are 26 lowercase digits, 26, to the power of 7, for when we were trying 7 passwords and then for, let's say, six character passwords with two digits on the end it's going to be 26 to the power of 6 multiplied by 10 to the power of 2. this is the status of the last attack i did, and it had this many passwords to crack and it's done them all and it was doing at 38 billion hashes per second. which is why md5 is not usable in any sense anymore, ever. don't use it. okay, is that clear yet? okay, so this is a start, right? now the problem is that first of all, i only get a few hashes each time because it, you know... this is only 6000 passwords. if it were linkedin's 40 million password database, you'd get a lot like this, but it's a bit of work for me to do this. there are ways of generating this mass automatically and iterating through them to try all the different combinations. the other thing is that once we start getting to 9 or 10 character passwords, even for this machine it starts to become impractical. particularly if people are using larger character sets so consider that this 7 length password is 26^7. well, if you're using lower and uppercase, it's going to be (26*2)^7. okay, which is 52. 52^7... put me on the spot! 52^7, and then if you add symbols it's more, and it's something like, if you're having symbols and numbers as well, it's going to be somewhere around 90^7, each depending on your character set. so... that's too much, even for this. at 7 length, it might be feasible. at 8 length, it starts to get pretty difficult, if you're using symbols, and at nine still currently not really doable, even for md5, okay, because that's how big the search space is. but, most password cracking these days doesn't work this way. okay, this is a start and you can pick up the really rubbish passwords. so if your password is six characters long, it's being cracked right now, and it's being cracked quickly because we can go through all the 6 character passwords in a fraction of a second. for longer passwords, we have to  make some assumptions about the way that people choose passwords. so, obviously the password "password" or in the "password1" is actually nine characters, you know, in which brute force is pretty good, but it's not good because it's just the sort of number one password to be used and so on the top of your list of hypothetical passwords, it should be right at the top and the first one you try. okay, so this is what a dictionary attack does. we have a dictionary of a list of commonly used words or commonly used passwords, and then we try those. and then we manipulate them slightly, with rules, and we try them again and we append them to other words and try them again and we do lots of different combinations of things and try them again. and it's pretty scary. it's much more effective than brute force, and so it's the current way that things are done. the hashing rate goes down a bit because you're loading dictionaries and doing word manipulations but it's still pretty quick. so let's show you an example dictionary. so this dictionary has common passwords that have been cracked from other sources. there are other password lists, like the rockyou list and soon the linkedin list, i'm sure, which will have a big impact because they are real passwords of people are actually using, so if you make a word list out of those passwords that's going to be really effective. let's run this example dictionary over our passwords, but now let's just manipulate it a bit to make it a little more well, scary is one way of looking at it. right so, hashcat, but this time we're going to run in attack mode 0, which is straight dictionary attack. okay, if i did that against my example dictionary that we've got, then it would probably find, you know, a couple. it's very quick, because it's not that many, so it's already finished and it found one: this chat with "13lexon". so what that's telling me is there's only one guy who happened to have who happened to have the same password that's in the word list. now that's quite common because i mean, in a really big database, you're going to have a lot of people who have "password" and "password1234" and "12341234" and so on-- all those people are going to be found this way but what we really want to do is mix up the dictionary little bit, swap a few letters around. so what these rules do, they do obvious things like they replace "i" with the number 1. or they replace "e" with a 3. or put an "@" in instead of an "&" or something. you know, mix it up a bit, common password substitutions: leet speak, weird things like this that people think are very secure, and in fact they're just got rules to just completely defeat them. toggling case up and down, you know, if a password's viable, then the same password with the first letter as uppercase also probably viable. alright, so you do all these things. and there are rules to do this. now, if one of my, one of the-- if someone does a lot of password cracking, because maybe it's their job... which is kind of a weird job but people do do it, security experts and stuff, if you're really into this then you have your own dictionaries and your own rules i'm not using it today, i don't have my own dictionaries, my own rules, because fun as this is, mostly i have no more work to do. now what i'm going to do here is i'm going to put in a ruleset called dive.rule. now i don't know who dive is, i expect it's an alias of some hacker somewhere. he's got quite a good rule set that works quite nicely with this hash file. okay so let's run it, and what it is going to do is go through all of the rules in turn and for each rule it's gonna through the whole dictionary and try all those different combinations against these hashes. and here they come. so that was about a thousand hashes we just got, which is a little bit worrying some of them are rude,  right, i've scrolled past those, okay, because some people have rude passwords. those passwords are bad passwords because rude words are also in these dictionaries. alright, so if you you're being clever by putting swear words in your password file you actually are just making it weaker. okay, these are some not absolutely terrible passwords in some sense, most of them are lowercase with a few numbers. "leanadrien", which might be a name, is ok but probably a similar word's in the dictionary and it got manipulated in some ways and some letters got swapped around and suddenly it was cracked. so we've had some luck, we've done a bit of brute force, we've done a basic dictionary attack, we have a few rules just to mix it up, and we've got some passwords. so far i've cracked i think about 1700 passwords out of about 6 and a half thousand. some of these passwords aren't crackable, in the sense that you could be here for days and still have some left, but i think i've previously gotten about sixty or seventy percent fairly easily. so how can we get even better? well, we use a better dictionary. that's the key. this example dictionary is fine, it's not very long, you know some passwords are going to be in it, but as you remember we ran it and it didn't find many passwords. it found some when we ran it through some rules, but it didn't find a lot. so what we really want to do is find a list of actual passwords that people are using in real life and use that. now luckily, these leaks happen all the time and so passwords are just being dumped out onto the internet all the time. so there's this password list called rockyou, which is a bit of a game changer in password cracking, if that's a thing and basically it's 14 million or so passwords i think, actually leaked from a proper database of real passwords that people were using. it was i think it was a gaming service or something like this and then it got leaked. and the point is that if you run the rockyou database over these hashes you start to really get results, because there's just much more interesting passwords in the rockyou database, there's just many more of them. if i run the same thing i did before, but i parse it over the rockyou dictionary... so i'm doing the exact same thing as before: same rule manipulations parsing over the rockyou dictionary, we should get many more passwords. should we see? okay. it's just compiling the cuda and then
off it goes. and here they come and they're just
going to keep coming, right, there's a lot more because we've got lots and we've got many rules and we've got many... 40 million passwords in this list. it's going to take quite a lot longer to do. okay, so but it's pretty fast! if i pause it and if we look at the status... so we're calculating now in total 8 to 10 thousand hashes per second. so, about four times slower because of all the dictionary manipulations we have to do. but it's still pretty quick. [off camera] so you said compiling the cuda, i've heard of mentioned cuda in terms of graphics card before, what does that mean? so cuda is an nvidia-- i mean actually hashcat can work on amd cards as well-- but what it basically does is it compiles a c-like intermediate language that tells the graphics card what to do. normally-- so cuda in detail is for a different video-- but normally, what a graphics card does is basically take a bunch of vertices in your world, transform them in front of your camera and render them to the screen very very quickly. and the reason it does it quickly, because it maybe as 2800, 3000 processes all doing the same basic stuff. it's essentially taking the rockyou list manipulating it using the rules and testing these words for passwords at a rate of 8 to 10 thousand million per second. [off camera mumbling] yeah, 10 billion per second right? i just-- it's the way it's written here, so i keep saying 8 thousand million, 8 billion. 8 billion per second. [off camera] so that's 8 billion attempts? [mike] yeah. so, you know, it'll try "password1" then it will try "password2", then it'll try "password3" with a captial p and so on and so forth, for much more complicated passwords and we've already i mean, i paused it and we've already got 3000 now. we had 1700 so we've got 1300 in--i ran it for about 10 seconds? and if i keep running it, so i keep resuming, and theyre gonna keep coimng. alright, and some of these passwords are really, really hard to crack by brute force or by normal dictionary, and this rockyou has changed everything. in the sense that it's just so varied that you just get password that you just get passwords that you think are really good. if i pause it and we look at the passwords... i mean this one, "nik21061989" you could guess that that-- because it's the guy's date, but it's been found in the dictionary "spacelightning" is quite a long one, but it's two words put together, so that's not secure. alright, so it's been found. and so on and so forth. "laurence0901", even if 0901 is completely random, you're going to get caught. alright, because you've used your name. alright, so we can just keep going, we can keep going with this. and they'll just keep coming. if i look at the... how long we've got left, we've done'%. and we've cracked another 200 since i've been talking. so it's just going to keep going. and finish off the database. so if like md5 you are doing fairly basic things, you can plow through jobs and in this case, i'm doing it with however many calls per gpu with 4 gpus. which is a little bit, a little bit worrying. i mean, it's still going. my current-- my current count is... i'm 47% through this particular attack. i could use different rules, there are other rules, like toggling case rules and things. i've got 3 and 1/2 thousand now, nearly. of these-- so, nearly half of the passwords, right? and some of these passwords are good. so i guess, for the people watching you got to think how good are your passwords? are your passwords better than half the people in this list, right? and if they aren't, you-- that's probably the next thing you should do, is change them, you know? i mean xkcd alluded to this and we'll talk about that in a minute, you know it didn't necessarily answer every question but it did get a good message across and then there's other aspects, you know, should you reuse passwords and so on.