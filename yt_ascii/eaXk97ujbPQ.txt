hi everyone welcome to coding adventures a series which is probably a lot less exciting than it sounds essentially just a place for me to share some of my little experimental projects in the hope that some of you might find them interesting so recently i've been intrigued by the idea of simulating erosion to try make generated terrain a little more interesting and natural-looking so a couple of years ago when i was doing research for my procedural terrain series i came across a technique that went something like this imagine it is raining and a drop of rain falls somewhere over here on the map and it starts to run down the slope and as it does so it's going to pick up little bits of soil and maybe a road some of the rock and carry that with it and over time the droplet of water is going to slow down and start to evaporate and is going to deposit that sediment that it was carrying back into the terrain since this is one of the ways that landscapes are shaped in the real world hopefully if we simulate this enough times we'll start to get something at least crudely resembling nature so as a starting point i generated some terrain by taking coherent noise with increasing frequencies and decreasing amplitudes and adding those together to get a height map encode this height map is just an array of floats with 0 representing the lowest point on the terrain and 1 the highest from that height map i could then construct a mesh to display the terrain in the game world with that done i started writing the erosion code my first step was calculating downhill paths for the droplets i then made those droplets subtract from the height map as they moved along and also add back to the height map when they became too saturated with sediment however when i ran this i was mostly just getting a lot of deep pits forming i thought that i could probably fix this by giving the droplets some inertia so that they wouldn't just get stuck in the first bit that they came across but unfortunately things were going quite terribly wrong growing a little frustrated by this point i did some googling and came across a paper by someone called transpire which gives a really excellent overview of the process and also points out some potential pitfalls for example if we have two points on the height map say this is at 0.5 and this is at 0.6 and the water is flowing down from the higher one to the lower then it shouldn't erode this terrain over here by more than the difference between the two so it shouldn't eroded by more than 0.1 just because if we were too far down this can end up creating these weird spikes and pits that i was seeing earlier so as i read through the paper i created an outline of the steps i'd need to implement first to create a drop of water at a random point on the map then looping a bunch of times find the drops height and the direction of flow at that point then update the drops position and find its new height next to calculate how much sediment it can carry based on its speed and how much water is in the droplet and if it's currently carrying more than it should be able to or if it's flowing up a slope due to its inertia then deposit a fraction of the sediment otherwise a rhoda fraction of the droplets remaining capacity finally the droplet speed needs to be updated and some of the water should be evaporated once had finally filled in all the steps with actual code i was very excited to press go and watch this ugly lumpy terrain be transformed into a magnificent landscape [music] you you thankfully i didn't take too long to discover that i was just multiplying by the wrong variable in a rather critical place and once i'd sorted that out it finally worked so here you can see how over a number of iterations it's forming these nice crisp bridges and this delightful grooves down the side i don't know what the right thing is to call those but i think they look really cool and also these lovely flat regions here's a side-by-side comparison of the starting terrain and then after simulating those 70,000 droplets of water just as a very rough reference this is a 255 255 map and it took roughly 3/4 of a second to run on my machine the last thing i did for this project was great a super simple shader that allowed me to specify a grass color and a rock color and then control how flat the ground needs to be in order for the grass to grow there there's also a slider for how much blending to apply between the two colors alright i'm going to end off this video with a few more animations of the erosion simulation i think would be extremely interesting to try to the simulation on a voxel terrain instead of the height map so that it could create caverns and overhangs i'd also be curious to try creating the initial terrain with some sort of simulation of tectonic plates rather than just using noise anyway if you found this interesting and you'd maybe like to experiment with it yourself i'll link to my code as well as the resources that i used to learn this all in the description alright thanks for watching and until next time chiz