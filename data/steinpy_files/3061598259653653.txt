import torch
import torchaudio 
from matplotlib import pyplot as plt

__SR        = 1024
__NFFT      = 600
__WIN       = 600
__HOP       = 128
__NMEL      = 64
__THRESH    = 64
__ENCODED   = (8*__SR//__HOP)   #__NMEL,
__DECODED   = (8*__SR//__HOP+1) #__NMEL,


transform_img_gan                           = torch.nn.Sequential(
    torchaudio.transforms.MelSpectrogram(sample_rate=__SR,n_fft=__NFFT,win_length=__WIN,hop_length=__HOP,n_mels=__NMEL),
    #torch.nn.Unflatten(dim=0,unflattened_size=(1,1)),
    torch.nn.Upsample(size=__ENCODED)
).cuda()

transform_wav_gan                           = torch.nn.Sequential(
    torch.nn.Upsample(size=__DECODED),
    torchaudio.transforms.InverseMelScale(n_stft=__NFFT//2+1,n_mels=__NMEL,sample_rate=__SR),
    torchaudio.transforms.GriffinLim(n_fft=__NFFT,win_length=__WIN,hop_length=__HOP)
).cuda()


def to_spec(x:torch.Tensor) -> torch.Tensor:
    #Put on cuda
    if not x.is_cuda:
        x   = x.cuda()
    
    #SPEC 
    x       = transform_img_gan(x)

    #TRANSFORMS
    x       = (x.clip(0,1_000) - 500) / 500

    return x

def to_wav(x:torch.Tensor) -> torch.Tensor:
    #Put on cuda
    if not x.is_cuda:
        x   = x.cuda()

    #TRANSFORMS
    x       = (x * 500) + 500 

    #WAV
    x       = transform_wav_gan(x)

    return x
    