import torch
from torch.utils.data import DataLoader
import torchaudio 
import data_utils
import spec_utils
import networks
from matplotlib import pyplot as plt
if __name__ == "__main__":

    torch.manual_seed(512)
    bs          = 128
    epochs      = 20 
    lr          = .0004
    act         = torch.nn.ReLU


    #For Train
    pca_handler = data_utils.PCA_Handler(sample_rate=spec_utils.__SR,non_pca=True)
    pca_handler.ds_no_pca(n_samples=512,length_s=8)
    dataset     = data_utils.AudioDataSet(pca_handler) 
    dataloader  = DataLoader(dataset,batch_size=bs,shuffle=True,pin_memory=False) 
    #For Test
    pca_test    = data_utils.PCA_Handler(sample_rate=spec_utils.__SR,non_pca=True)
    pca_test.ds_no_pca(n_samples=8,length_s=8)
    dataset_t   = data_utils.AudioDataSet(pca_test) 
    testloader  = DataLoader(dataset_t,batch_size=8,shuffle=True,pin_memory=False) 
    

    for act in [torch.nn.GELU]:
        for p in [.5,.1]:
            model       = networks.autoencoder(act_fn=act)
            optim       = torch.optim.Adam(model.parameters(),lr=lr,betas=(.75,.999))
            losses      = []
            for ep_num in range(epochs):
                if ep_num % 10 == 0:
                    print(f"\tEPOCH {ep_num}")
                for i,batch in enumerate(dataloader):

                    model.zero_grad()

                    data            = batch[0].to(torch.device('cuda'))

                    reconstruction  = model.forward(data)

                    error           = torch.nn.functional.mse_loss(data,reconstruction)
                    error.backward()
                    optim.step()
                
                #Test quality 
                with torch.no_grad():
                    model.eval()
                    batch_losses    = []
                    for testset in testloader:
                        data            = batch[0].to(torch.device('cuda'))
                        reconstruction  = model.forward(data)
                        batch_losses.append(torch.nn.functional.mse_loss(data,reconstruction).detach().cpu().item())
                    losses.append(sum(batch_losses)/len(batch_losses))
                model.train()
            print(f"\tloss:{losses[-1]}{bs}_act={act}_p={p}")
            plt.plot(losses,label=f"bs={bs}_act={act}_p={p}")

    plt.legend()
    plt.show()
