import networks
import argparse
import os
import random
import torch
import torch.nn as nn
import torch.nn.parallel
import torch.optim as optim
import torch.utils.data
import torchvision.datasets as dset
import torchvision.transforms as transforms
import torchvision.utils as vutils
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import torch.nn as nn
import torch
from torch import optim 
import data_utils
import spec_utils
from torch.utils.data import DataLoader
nz      = 500
ngf     = 128
ngpu    = 1
nc      = 1
ndf     = 128
num_epochs = 100
bs      = 256
lr      = .0001
beta1   = .5 

pca_handler = data_utils.PCA_Handler(sample_rate=spec_utils.__SR,non_pca=True)
pca_handler.ds_no_pca(n_samples=512,length_s=8,load_cap=8)
dataset     = data_utils.AudioDataSet(pca_handler) 
dataloader  = DataLoader(dataset,batch_size=bs,shuffle=True,pin_memory=False) 
device  = torch.device('cuda')
exit()
def weights_init(m):
    classname = m.__class__.__name__
    if classname.find('Conv') != -1:
        nn.init.normal_(m.weight.data, 0.0, 0.01)
    elif classname.find('BatchNorm') != -1:
        nn.init.normal_(m.weight.data, 1.0, 0.01)
        nn.init.constant_(m.bias.data, 0)


class Generator(nn.Module):
    def __init__(self, ngpu):
        super(Generator, self).__init__()
        self.ngpu = ngpu
        self.main = nn.Sequential(
            # input is Z, going into a convolution
            nn.ConvTranspose2d( nz, ngf * 8, 4, 1, 0, bias=False),
            nn.Dropout(p=.5),
            nn.BatchNorm2d(ngf * 8),
            nn.LeakyReLU(.2,True),
            # state size. ``(ngf*8) x 4 x 4``
            nn.ConvTranspose2d(ngf * 8, ngf * 8, 6, 2, 2, bias=False),
            nn.Dropout(p=.5),
            nn.BatchNorm2d(ngf * 8),
            nn.LeakyReLU(.2,True),
            # state size. ``(ngf*4) x 8 x 8``
            nn.ConvTranspose2d( ngf * 8, ngf * 4, 6, 2, 2, bias=False),
            nn.Dropout(p=.5),
            nn.BatchNorm2d(ngf * 4),
            nn.LeakyReLU(.2,True),
            # state size. ``(ngf*2) x 16 x 16``
            nn.ConvTranspose2d( ngf * 4, ngf*2, 6, 2, 2, bias=False),
            nn.Dropout(p=.5),
            nn.BatchNorm2d(ngf*2),
            nn.LeakyReLU(.2,True),
            # state size. ``(ngf) x 32 x 32``
            nn.ConvTranspose2d( ngf*2, ngf, 6, 2, 2, bias=False),
            nn.Dropout(p=.5),
            nn.BatchNorm2d(ngf),
            nn.LeakyReLU(.2,True),
            # state size. ``(nc) x 64 x 64``
            nn.ConvTranspose2d( ngf, nc, 6, 2, 2, bias=False),
            nn.Tanh()
            # state size. ``(nc) x 128 x 128``
        )

    def forward(self, input):
        y   = self.main(input)
        return y
    
    # Create the generator
netG = Generator(ngf).to(device)

# Handle multi-GPU if desired
if (device.type == 'cuda') and (ngpu > 1):
    netG = nn.DataParallel(netG, list(range(ngpu)))

# Apply the ``weights_init`` function to randomly initialize all weights
#  to ``mean=0``, ``stdev=0.02``.
netG.apply(weights_init)

# Print the model
print(netG)
class Discriminator(nn.Module):
    def __init__(self, ngpu):
        super(Discriminator, self).__init__()
        self.ngpu = ngpu
        self.main = nn.Sequential(
            # input is ``(nc) x 128 x 128``
            nn.Conv2d(nc, ndf, 4, 2, 1, bias=False),
            nn.LeakyReLU(0.2, inplace=True),
            # input is ``(nc) x 64 x 64``
            nn.Conv2d(ndf, ndf * 2, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ndf * 2),
            nn.LeakyReLU(0.2, inplace=True),
            # state size. ``(ndf) x 32 x 32``
            nn.Conv2d(ndf * 2, ndf * 4, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ndf * 4),
            nn.LeakyReLU(0.2, inplace=True),
            # state size. ``(ndf*2) x 16 x 16``
            nn.Conv2d(ndf * 4, ndf * 8, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ndf * 8),
            nn.LeakyReLU(0.2, inplace=True),
            # state size. ``(ndf*4) x 8 x 8``
            nn.Conv2d(ndf * 8, ndf * 8, 4, 2, 1, bias=False),
            nn.BatchNorm2d(ndf * 8),
            nn.LeakyReLU(0.2, inplace=True),
            # state size. ``(ndf*8) x 4 x 4``
            nn.Conv2d(ndf * 8, 1, 4, 1, 0, bias=False),
            nn.Sigmoid()
        )

    def forward(self, input):
        return self.main(input)
    
    # Create the Discriminator
netD = Discriminator(ndf).to(device)

# Handle multi-GPU if desired
if (device.type == 'cuda') and (ngpu > 1):
    netD = nn.DataParallel(netD, list(range(ngpu)))

# Apply the ``weights_init`` function to randomly initialize all weights
# like this: ``to mean=0, stdev=0.2``.
netD.apply(weights_init)

# Print the model
print(netD)


# Initialize the ``BCELoss`` function
criterion = nn.BCELoss()

# Create batch of latent vectors that we will use to visualize
#  the progression of the generator
fixed_noise = torch.randn(64, nz, 1, 1, device=device)

# Establish convention for real and fake labels during training
real_label = 1.
fake_label = 0.

# Setup Adam optimizers for both G and D
#optimizerD = optim.Adam(netD.parameters(), lr=lr, betas=(beta1, 0.999),weight_decay=.01)
optimizerD = optim.SGD(netD.parameters(), lr=.0005,momentum=.9,weight_decay=.01)
optimizerG = optim.Adam(netG.parameters(), lr=lr, betas=(beta1, 0.999),weight_decay=.01)

# Training Loop

# Lists to keep track of progress
img_list = []
G_losses = []
D_losses = []
iters = 0

print("Starting Training Loop...")
# For each epoch
for epoch in range(num_epochs):
    # For each batch in the dataloader
    maxval  = 0  
    for i, data in enumerate(dataloader, 0):

        ############################
        # (1) Update D network: maximize log(D(x)) + log(1 - D(G(z)))
        ###########################
        ## Train with all-real batch
        netD.zero_grad()
        # Format batch
        real_cpu = data[0].to(device)
        if real_cpu.max() > maxval:
            maxval  = real_cpu.max()

        b_size = real_cpu.size(0)
        
        #Make smooth labels
        real_label  = torch.full((b_size,),.7,dtype=torch.float,device=device) + torch.rand((b_size,),dtype=torch.float,device=device)*.3

        # Forward pass real batch through D
        output = netD(real_cpu).view(-1)
        # Calculate loss on all-real batch
        errD_real = criterion(output, real_label)
        # Calculate gradients for D in backward pass
        errD_real.backward()
        D_x = output.mean().item()

        ## Train with all-fake batch
        # Generate batch of latent vectors
        noise = torch.randn(b_size, nz, 1, 1, device=device)
        # Generate fake image batch with G
        fake = netG(noise)
        
        #Make smooth labels
        fake_label  = torch.full((b_size,),0,dtype=torch.float,device=device) + torch.rand((b_size,),dtype=torch.float,device=device)*.3


        # Classify all fake batch with D
        output = netD(fake.detach()).view(-1)
        # Calculate D's loss on the all-fake batch
        errD_fake = criterion(output, fake_label)
        # Calculate the gradients for this batch, accumulated (summed) with previous gradients
        errD_fake.backward()
        D_G_z1 = output.mean().item()
        # Compute error of D as sum over the fake and the real batches
        errD = errD_real + errD_fake
        # Update D
        optimizerD.step()

        ############################
        # (2) Update G network: maximize log(D(G(z)))
        ###########################
        netG.zero_grad()
        label   = torch.full((b_size,),1,dtype=torch.float,device=device)
        #label.fill_(real_label)  # fake labels are real for generator cost
        # Since we just updated D, perform another forward pass of all-fake batch through D
        output = netD(fake).view(-1)
        # Calculate G's loss based on this output
        errG = criterion(output, label)
        # Calculate gradients for G
        errG.backward()
        D_G_z2 = output.mean().item()
        # Update G
        optimizerG.step()

        # Output training stats
        if i % 100 == 0:
            print('[%d/%d][%d/%d]\tLoss_D: %.4f\tLoss_G: %.4f\tD(x): %.4f\tD(G(z)): %.4f / %.4f'
                  % (epoch, num_epochs, i, len(dataloader),
                     errD.item(), errG.item(), D_x, D_G_z1, D_G_z2))

        # Save Losses for plotting later
        G_losses.append(errG.item())
        D_losses.append(errD.item())


    wav     = spec_utils.to_wav(fake[0].detach().cpu()).cpu()[0]
    
    data_utils.save_waveform_wav(wav,f"C:\gitrepos\lofi\saves\{epoch}.wav",spec_utils.__SR)
    plt.imshow(np.transpose(fake[0].detach().cpu(),(1,2,0)))
    plt.savefig(f"C:\gitrepos\lofi\saves\{epoch}.png")
iters += 1